{"remainingRequest":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/vue-loader/lib/index.js??vue-loader-options!/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/src/views/PhoneDisplaySetting.vue?vue&type=script&lang=js&","dependencies":[{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/src/views/PhoneDisplaySetting.vue","mtime":1600155105014},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/babel-loader/lib/index.js","mtime":1600155105338},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/cache-loader/dist/cjs.js","mtime":1600155105894},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/vue-loader/lib/index.js","mtime":1600155105414}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}