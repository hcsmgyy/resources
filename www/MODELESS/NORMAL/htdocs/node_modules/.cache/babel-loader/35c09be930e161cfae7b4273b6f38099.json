{"remainingRequest":"E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\node_modules\\thread-loader\\dist\\cjs.js!E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\node_modules\\babel-loader\\lib\\index.js!E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\src\\views\\PhoneRelay.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\src\\views\\PhoneRelay.vue","mtime":1625712892498},{"path":"E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624613261239},{"path":"E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1624613273395},{"path":"E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\node_modules\\babel-loader\\lib\\index.js","mtime":1624613260275},{"path":"E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624613261239},{"path":"E:\\workspace\\resources\\www\\MODELESS\\NORMAL\\htdocs\\node_modules\\vue-loader\\lib\\index.js","mtime":1624613274496}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7Ci8vCi8vCi8vCi8vCmltcG9ydCBDb21tb25QYWdlIGZyb20gIkAvY29tcG9uZW50cy9Db21tb25QYWdlLnZ1ZSI7CmltcG9ydCB7IHNob3dSZXF1ZXN0U3VjY2VzcywgZGVlcENsb25lLCBub3RDb250YWluSW52YWxpZCwgZ2V0SXRlbUJ5S2V5LCBjaGVja0lwQWRkciB9IGZyb20gIkAvanMvY29tbW9uLmpzIjsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIENvbW1vblBhZ2U6IENvbW1vblBhZ2UKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzdGF0dXNJdGVtczogW3sKICAgICAgICBrZXk6IDAsCiAgICAgICAgbGFiZWw6IHRoaXMuJHQoIkRpc2FibGVkIikKICAgICAgfSwgewogICAgICAgIGtleTogMSwKICAgICAgICBsYWJlbDogdGhpcy4kdCgiRW5hYmxlZCIpCiAgICAgIH1dLAogICAgICBjaGFuZ2VkQ2ZnRGF0YToge30sCiAgICAgIHN1Ym1pdENmZ0RhdGE6IHt9LAogICAgICBhcGlEYXRhOiB7fSwKICAgICAgZGF0YTogewogICAgICAgIGdldERhdGFTdWNjZXNzOiBmYWxzZQogICAgICB9CiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIGdldERhdGEodGhpcyk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBvbkNvbW1vblBhZ2VEYXRhQ2hhbmdlOiBmdW5jdGlvbiBvbkNvbW1vblBhZ2VEYXRhQ2hhbmdlKGV2ZW50KSB7CiAgICAgIHNldENoYW5nZWREYXRhKHRoaXMsIGV2ZW50KTsgLy/nlYzpnaLlj5jljJYKCiAgICAgIGhhbmRsZXJQYWdlQ2hhbmdlZCh0aGlzKTsKICAgIH0KICB9Cn07CnZhciBzaG93RGVsQWxsQnRuID0gZmFsc2U7CgpmdW5jdGlvbiBzZXRDaGFuZ2VkRGF0YSh2bSwgZXZlbnQpIHsKICBpZiAoZXZlbnQuY29udGVudEtleSA9PSAicmVsYXlTZXR0aW5nIiB8fCBldmVudC5jb250ZW50S2V5ID09ICJvcGVuUmVsYXlWaWFIdHRwIiB8fCBldmVudC5jb250ZW50S2V5ID09ICJyZW1vdGVDb250cm9sIiB8fCBldmVudC5jb250ZW50S2V5ID09ICJ3ZWJSZWxheSIpIHsKICAgIHZtLmNoYW5nZWRDZmdEYXRhW2V2ZW50Lml0ZW1LZXldID0gZXZlbnQubmV3VmFsOwogIH0gZWxzZSBpZiAoZXZlbnQuY29udGVudEtleSA9PSAic29mdGtleUluVGFsa2luZyIgJiYgZXZlbnQuaXRlbUtleSA9PSAic29mdGtleUluVGFsa2luZyIpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnQubmV3VmFsLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuVGFsa2luZ1N0YXR1cyIgKyAoaSArIDEpXSA9IGV2ZW50Lm5ld1ZhbFtpXS5zdGF0dXMudmFsdWU7CiAgICAgIHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuVGFsa2luZ0NvbERpc3BsYXlOYW1lIiArIChpICsgMSldID0gZXZlbnQubmV3VmFsW2ldLmRpc3BsYXlOYW1lLnZhbHVlOwogICAgICB2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLlRhbGtpbmdSZWxheVR5cGUiICsgKGkgKyAxKV0gPSBldmVudC5uZXdWYWxbaV0udHlwZS52YWx1ZTsKICAgIH0KICB9IGVsc2UgaWYgKGV2ZW50LmNvbnRlbnRLZXkgPT0gInNvZnRrZXlJbkhvbWVPck1vcmUiICYmIGV2ZW50Lml0ZW1LZXkgPT0gInNvZnRrZXlJbkhvbWVPck1vcmUiKSB7CiAgICB2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLklkbGVTdGF0dXMiXSA9IGV2ZW50Lm5ld1ZhbFswXS5zdGF0dXMudmFsdWU7CiAgICB2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLklkbGVEaXNwbGF5TmFtZSJdID0gZXZlbnQubmV3VmFsWzBdLmRpc3BsYXlOYW1lLnZhbHVlOwogICAgdm0uY2hhbmdlZENmZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5JZGxlUmVsYXlUeXBlIl0gPSBldmVudC5uZXdWYWxbMF0udHlwZS52YWx1ZTsKICB9IGVsc2UgaWYgKGV2ZW50LmNvbnRlbnRLZXkgPT0gInNvZnRrZXlJbkNhbGxQcmV2aWV3IiAmJiBldmVudC5pdGVtS2V5ID09ICJzb2Z0a2V5SW5DYWxsUHJldmlldyIpIHsKICAgIHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuSW5jb21pbmdTdGF0dXMiXSA9IGV2ZW50Lm5ld1ZhbFswXS5zdGF0dXMudmFsdWU7CiAgICB2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkluY29taW5nRGlzcGxheU5hbWUiXSA9IGV2ZW50Lm5ld1ZhbFswXS5kaXNwbGF5TmFtZS52YWx1ZTsKICAgIHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuSW5jb21pbmdSZWxheVR5cGUiXSA9IGV2ZW50Lm5ld1ZhbFswXS50eXBlLnZhbHVlOwogIH0gZWxzZSBpZiAoZXZlbnQuY29udGVudEtleSA9PSAic29mdGtleUluTW9uaXRvciIgJiYgZXZlbnQuaXRlbUtleSA9PSAic29mdGtleUluTW9uaXRvciIpIHsKICAgIHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuTW9uaXRvclN0YXR1cyJdID0gZXZlbnQubmV3VmFsWzBdLnN0YXR1cy52YWx1ZTsKICAgIHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuTW9uaXRvckRpc3BsYXlOYW1lIl0gPSBldmVudC5uZXdWYWxbMF0uZGlzcGxheU5hbWUudmFsdWU7CiAgICB2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLk1vbml0b3JSZWxheVR5cGUiXSA9IGV2ZW50Lm5ld1ZhbFswXS50eXBlLnZhbHVlOwogIH0gZWxzZSBpZiAoZXZlbnQuY29udGVudEtleSA9PSAicmVtb3RlUmVsYXlCeUh0dHAiICYmIGV2ZW50Lml0ZW1LZXkgPT0gInJlbW90ZVJlbGF5QnlIdHRwIiAmJiBldmVudC50YWJsZU9wZXJhdGVUeXBlICE9ICJzZWxlY3Rpb24iKSB7CiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZXZlbnQubmV3VmFsLmxlbmd0aDsgX2krKykgewogICAgICB2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTU9URVJFTEFZLlJlbW90ZUlQIiArIF9pXSA9IGV2ZW50Lm5ld1ZhbFtfaV0ucmVtb3RlSXAudmFsdWU7CiAgICAgIHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVNT1RFUkVMQVkuUmVtb3RlVVJMIiArIF9pXSA9IGV2ZW50Lm5ld1ZhbFtfaV0ucmVtb3RlQWRkcmVzcy52YWx1ZTsKICAgICAgdm0uY2hhbmdlZENmZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRU1PVEVSRUxBWS5SZW1vdGVVc2VyIiArIF9pXSA9IGV2ZW50Lm5ld1ZhbFtfaV0udXNlcm5hbWUudmFsdWU7CiAgICAgIHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVNT1RFUkVMQVkuUmVtb3RlUGFzc3dkIiArIF9pXSA9IGV2ZW50Lm5ld1ZhbFtfaV0ucGFzc3dvcmQudmFsdWU7CiAgICAgIHZhciBkb29yTnVtID0gIiI7CgogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGV2ZW50Lm5ld1ZhbFtfaV0uZG9vck51bS52YWx1ZS5sZW5ndGg7IGorKykgewogICAgICAgIGRvb3JOdW0gKz0gZXZlbnQubmV3VmFsW19pXS5kb29yTnVtLnZhbHVlW2pdOwoKICAgICAgICBpZiAoaiAhPSBldmVudC5uZXdWYWxbX2ldLmRvb3JOdW0udmFsdWUubGVuZ3RoIC0gMSkgewogICAgICAgICAgZG9vck51bSArPSAiLCI7CiAgICAgICAgfQogICAgICB9CgogICAgICB2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTU9URVJFTEFZLlJlbW90ZURvb3JOdW0iICsgX2ldID0gZG9vck51bTsKICAgIH0KICB9IGVsc2UgaWYgKGV2ZW50LmNvbnRlbnRLZXkgPT0gIndlYlJlbGF5QWN0aW9uU2V0dGluZyIgJiYgZXZlbnQuaXRlbUtleSA9PSAid2ViUmVsYXlBY3Rpb25TZXR0aW5nIikgewogICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZXZlbnQubmV3VmFsLmxlbmd0aDsgX2kyKyspIHsKICAgICAgdm0uY2hhbmdlZENmZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5XRUJSRUxBWS5XZWJSZWxheUlQIiArIF9pMl0gPSBldmVudC5uZXdWYWxbX2kyXS5pcC52YWx1ZTsKICAgICAgdm0uY2hhbmdlZENmZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5XRUJSRUxBWS5XZWJSZWxheVNJUCIgKyBfaTJdID0gZXZlbnQubmV3VmFsW19pMl0uc2lwLnZhbHVlOwogICAgICB2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLldFQlJFTEFZLldlYkFjdGlvbiIgKyBfaTJdID0gZXZlbnQubmV3VmFsW19pMl0uYWN0aW9uLnZhbHVlOwogICAgfQogIH0KCiAgaWYgKGV2ZW50Lml0ZW1LZXkgPT0gInJlbW90ZVJlbGF5QnlIdHRwIikgewogICAgdmFyIHNlbGVjdFJvdyA9IGdldEl0ZW1CeUtleSh2bS5kYXRhLCAicmVtb3RlUmVsYXlCeUh0dHAiLCAicmVtb3RlUmVsYXlCeUh0dHAiKS5zZWxlY3RlZFJvd0tleXM7CgogICAgaWYgKHNlbGVjdFJvdy5sZW5ndGggPiAwKSB7CiAgICAgIGdldEl0ZW1CeUtleSh2bS5kYXRhLCAicmVtb3RlUmVsYXlCeUh0dHAiLCAicmVtb3RlUmVsYXlCeUh0dHBEZWwiKS5kZWxEaXNhYmxlZCA9IGZhbHNlOwogICAgfSBlbHNlIHsKICAgICAgZ2V0SXRlbUJ5S2V5KHZtLmRhdGEsICJyZW1vdGVSZWxheUJ5SHR0cCIsICJyZW1vdGVSZWxheUJ5SHR0cERlbCIpLmRlbERpc2FibGVkID0gdHJ1ZTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGhhbmRsZXJQYWdlQ2hhbmdlZCh2bSkgewogIGlmICh2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLlJlbGF5T25XZWIiXSA9PSAwKSB7CiAgICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgIm9wZW5SZWxheVZpYUh0dHAiLCAiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLlJlbGF5T25XZWJVc2VyIikuZGlzYWJsZWQgPSB0cnVlOwogICAgZ2V0SXRlbUJ5S2V5KHZtLmRhdGEsICJvcGVuUmVsYXlWaWFIdHRwIiwgIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5SZWxheU9uV2ViUHdkIikuZGlzYWJsZWQgPSB0cnVlOwogIH0gZWxzZSB7CiAgICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgIm9wZW5SZWxheVZpYUh0dHAiLCAiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLlJlbGF5T25XZWJVc2VyIikuZGlzYWJsZWQgPSBmYWxzZTsKICAgIGdldEl0ZW1CeUtleSh2bS5kYXRhLCAib3BlblJlbGF5VmlhSHR0cCIsICJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuUmVsYXlPbldlYlB3ZCIpLmRpc2FibGVkID0gZmFsc2U7CiAgfQoKICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgInJlbGF5U2V0dGluZyIsICJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuRFRNRkNvZGUyIikuaXNIaWRlID0gdm0uYXBpRGF0YS5kYXRhLnN1cHBvcnRUaHJlZUR0bWYgIT0gMTsKICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgInJlbGF5U2V0dGluZyIsICJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuRFRNRkNvZGUzIikuaXNIaWRlID0gdm0uYXBpRGF0YS5kYXRhLnN1cHBvcnRUaHJlZUR0bWYgIT0gMTsKCiAgaWYgKHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuUmVtb3RlQ29udHJvbCJdID09IDApIHsKICAgIGdldEl0ZW1CeUtleSh2bS5kYXRhLCAicmVsYXlTZXR0aW5nIiwgIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5Mb2NhbERUTUYiKS5kaXNhYmxlZCA9IHRydWU7CiAgfSBlbHNlIHsKICAgIGdldEl0ZW1CeUtleSh2bS5kYXRhLCAicmVsYXlTZXR0aW5nIiwgIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5Mb2NhbERUTUYiKS5kaXNhYmxlZCA9IGZhbHNlOwogIH0KCiAgaWYgKHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuUmVtb3RlQ29udHJvbDIiXSA9PSAwKSB7CiAgICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgInJlbGF5U2V0dGluZyIsICJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuTG9jYWxEVE1GMiIpLmRpc2FibGVkID0gdHJ1ZTsKICB9IGVsc2UgewogICAgZ2V0SXRlbUJ5S2V5KHZtLmRhdGEsICJyZWxheVNldHRpbmciLCAiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkxvY2FsRFRNRjIiKS5kaXNhYmxlZCA9IGZhbHNlOwogIH0KfQoKZnVuY3Rpb24gc3VibWl0RGF0YSh2bSkgewogIHZtLmRhdGEuc3VibWl0TG9hZGluZyA9IHRydWU7CiAgdmFyIHJlcXVlc3REYXRhID0gewogICAgdGFyZ2V0OiAicGhvbmVSZWxheSIsCiAgICBhY3Rpb246ICJzZXQiLAogICAgY29uZmlnRGF0YTogdm0uc3VibWl0Q2ZnRGF0YQogIH07CiAgdm0uJGF4aW9zLnBvc3QoImFwaSIsIHJlcXVlc3REYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgaWYgKCJ1bmRlZmluZWQiICE9IHR5cGVvZiByZXNwb25zZSkgewogICAgICBzaG93UmVxdWVzdFN1Y2Nlc3Modm0pOwogICAgfQoKICAgIHZtLmRhdGEuc3VibWl0TG9hZGluZyA9IGZhbHNlOwogICAgZ2V0RGF0YSh2bSk7CiAgfSk7Cn0KCmZ1bmN0aW9uIGdldERhdGEodm0pIHsKICB2bS4kYXhpb3MuZ2V0KCJhcGkvcGhvbmVSZWxheS9pbmZvIikudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgIHZtLmdldERhdGFTdWNjZXNzID0gdHJ1ZTsKICAgIHZtLmFwaURhdGEgPSByZXNwb25zZS5kYXRhOwogICAgdm0uY2hhbmdlZENmZ0RhdGEgPSBkZWVwQ2xvbmUocmVzcG9uc2UuZGF0YS5jb25maWdEYXRhKTsKICAgIGNyZWF0ZVBhZ2VEYXRhKHZtKTsKICAgIGhhbmRsZXJQYWdlQ2hhbmdlZCh2bSk7CgogICAgaWYgKHNob3dEZWxBbGxCdG4pIHsKICAgICAgZ2V0SXRlbUJ5S2V5KHZtLmRhdGEsICJyZW1vdGVSZWxheUJ5SHR0cCIsICJyZW1vdGVSZWxheUJ5SHR0cERlbCIpLmRlbEFsbERpc2FibGVkID0gZmFsc2U7CiAgICB9IGVsc2UgewogICAgICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgInJlbW90ZVJlbGF5QnlIdHRwIiwgInJlbW90ZVJlbGF5QnlIdHRwRGVsIikuZGVsQWxsRGlzYWJsZWQgPSB0cnVlOwogICAgfQoKICAgIHNob3dEZWxBbGxCdG4gPSBmYWxzZTsKICB9KTsKfQoKZnVuY3Rpb24gZ2V0Q29tbWl0RGF0YSh2bSkgewogIHZtLnN1Ym1pdENmZ0RhdGEgPSB7fTsKCiAgZm9yICh2YXIgY2hhbmdlZEtleSBpbiB2bS5jaGFuZ2VkQ2ZnRGF0YSkgewogICAgaWYgKHZtLmFwaURhdGEuY29uZmlnRGF0YVtjaGFuZ2VkS2V5XSAhPSB2bS5jaGFuZ2VkQ2ZnRGF0YVtjaGFuZ2VkS2V5XSkgewogICAgICB2bS5zdWJtaXRDZmdEYXRhW2NoYW5nZWRLZXldID0gdm0uY2hhbmdlZENmZ0RhdGFbY2hhbmdlZEtleV07CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBjaGVja0NvbW1pdERhdGEodm0pIHsKICByZXR1cm4gY2hlY2tSZW1vdGVDb250cm9sKHZtKSAmJiBjaGVja1JlbW90ZVJlbGF5SHR0cCh2bSkgJiYgY2hlY2tXZWJSZWxheSh2bSkgJiYgY2hlY2tXZWJSZWxheUFjdGlvblNldHRpbmcodm0pOwp9CgpmdW5jdGlvbiBjaGVja1dlYlJlbGF5QWN0aW9uU2V0dGluZyh2bSkgewogIHZhciBzdWNjZXNzID0gdHJ1ZTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5hcGlEYXRhLmRhdGEud2ViUmVsYXlBY3Rpb25NYXhOdW07IGkrKykgewogICAgdmFyIHRhYmxlRGF0YSA9IGdldEl0ZW1CeUtleSh2bS5kYXRhLCAid2ViUmVsYXlBY3Rpb25TZXR0aW5nIiwgIndlYlJlbGF5QWN0aW9uU2V0dGluZyIpLnRhYmxlRGF0YTsKICAgIHRhYmxlRGF0YVtpXS5pcC5pc1dhcm4gPSBmYWxzZTsKICAgIHRhYmxlRGF0YVtpXS5zaXAuaXNXYXJuID0gZmFsc2U7CiAgICB0YWJsZURhdGFbaV0uYWN0aW9uLmlzV2FybiA9IGZhbHNlOwoKICAgIGlmICh2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLldFQlJFTEFZLldlYlJlbGF5SVAiICsgaV0gPT0gIiIgJiYgdm0uY2hhbmdlZENmZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5XRUJSRUxBWS5XZWJSZWxheVNJUCIgKyBpXSA9PSAiIiAmJiB2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLldFQlJFTEFZLldlYkFjdGlvbiIgKyBpXSAhPSAiIikgewogICAgICB0YWJsZURhdGFbaV0uaXAuaXNXYXJuID0gdHJ1ZTsKICAgICAgdGFibGVEYXRhW2ldLnNpcC5pc1dhcm4gPSB0cnVlOwogICAgICBzdWNjZXNzID0gZmFsc2U7CiAgICB9CgogICAgaWYgKCh2bS5jaGFuZ2VkQ2ZnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLldFQlJFTEFZLldlYlJlbGF5SVAiICsgaV0gIT0gIiIgfHwgdm0uY2hhbmdlZENmZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5XRUJSRUxBWS5XZWJSZWxheVNJUCIgKyBpXSAhPSAiIikgJiYgdm0uY2hhbmdlZENmZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5XRUJSRUxBWS5XZWJBY3Rpb24iICsgaV0gPT0gIiIpIHsKICAgICAgdGFibGVEYXRhW2ldLmFjdGlvbi5pc1dhcm4gPSB0cnVlOwogICAgICBzdWNjZXNzID0gZmFsc2U7CiAgICB9CiAgfQoKICByZXR1cm4gc3VjY2VzczsKfQoKZnVuY3Rpb24gY2hlY2tXZWJSZWxheSh2bSkgewogIHZhciBzdWNjZXNzID0gdHJ1ZTsKCiAgaWYgKHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuV0VCUkVMQVkuSXBBZGRyZXNzIl0gIT0gIiIgJiYgIWNoZWNrSXBBZGRyKHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuV0VCUkVMQVkuSXBBZGRyZXNzIl0pKSB7CiAgICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgIndlYlJlbGF5IiwgIkNvbmZpZy5Eb29yU2V0dGluZy5XRUJSRUxBWS5JcEFkZHJlc3MiKS5pc1dhcm4gPSB0cnVlOwogICAgc3VjY2VzcyA9IGZhbHNlOwogIH0KCiAgcmV0dXJuIHN1Y2Nlc3M7Cn0KCmZ1bmN0aW9uIGNoZWNrUmVtb3RlUmVsYXlIdHRwKHZtKSB7CiAgdmFyIHN1Y2Nlc3MgPSB0cnVlOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLmFwaURhdGEuZGF0YS5tYXhSZW1vdGVSZWxheU51bTsgaSsrKSB7CiAgICBpZiAoKHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVNT1RFUkVMQVkuUmVtb3RlVVJMIiArIGldICE9ICIiIHx8IHZtLmNoYW5nZWRDZmdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVNT1RFUkVMQVkuUmVtb3RlVXNlciIgKyBpXSAhPSAiIikgJiYgdm0uY2hhbmdlZENmZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRU1PVEVSRUxBWS5SZW1vdGVJUCIgKyBpXSA9PSAiIikgewogICAgICB2YXIgdGFibGVEYXRhID0gZ2V0SXRlbUJ5S2V5KHZtLmRhdGEsICJyZW1vdGVSZWxheUJ5SHR0cCIsICJyZW1vdGVSZWxheUJ5SHR0cCIpLnRhYmxlRGF0YTsKICAgICAgdGFibGVEYXRhW2ldLnJlbW90ZUlwLmlzV2FybiA9IHRydWU7CiAgICAgIHN1Y2Nlc3MgPSBmYWxzZTsKICAgIH0KICB9CgogIHJldHVybiBzdWNjZXNzOwp9CgpmdW5jdGlvbiBjaGVja1JlbW90ZUNvbnRyb2wodm0pIHsKICB2YXIgc3VjY2VzcyA9IHRydWU7CgogIGlmICghbm90Q29udGFpbkludmFsaWQodm0uY2hhbmdlZENmZ0RhdGFbIkNvbmZpZy5GZWF0dXJlcy5SRU1PVEVDT05UUk9MLkFjdGlvblVSSUFsbG93SVBMaXN0Il0pKSB7CiAgICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgInJlbW90ZUNvbnRyb2wiLCAiQ29uZmlnLkZlYXR1cmVzLlJFTU9URUNPTlRST0wuQWN0aW9uVVJJQWxsb3dJUExpc3QiKS5pc1dhcm4gPSB0cnVlOwogICAgc3VjY2VzcyA9IGZhbHNlOwogIH0KCiAgcmV0dXJuIHN1Y2Nlc3M7Cn0KCmZ1bmN0aW9uIGNyZWF0ZVBhZ2VEYXRhKHZtKSB7CiAgdm0uZGF0YSA9IHsKICAgIGdldERhdGFTdWNjZXNzOiB0cnVlLAogICAgYnJlYWRDcnVtYjogewogICAgICBmaXJzdFRpdGxlOiB2bS4kdCgiUGhvbmUiKSwKICAgICAgc2Vjb25kVGl0bGU6IHZtLiR0KCJSZWxheSIpCiAgICB9LAogICAgb25TdWJtaXQ6IGZ1bmN0aW9uIG9uU3VibWl0KCkgewogICAgICBpZiAoIWNoZWNrQ29tbWl0RGF0YSh2bSkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGdldENvbW1pdERhdGEodm0pOwogICAgICBzdWJtaXREYXRhKHZtKTsKICAgIH0sCiAgICBvbkNhbmNlbDogZnVuY3Rpb24gb25DYW5jZWwoKSB7CiAgICAgIHZtLmRhdGEuY2FuY2VsTG9hZGluZyA9IHRydWU7CiAgICAgIGdldERhdGEodm0pOwogICAgfSwKICAgIHN1Ym1pdExvYWRpbmc6IGZhbHNlLAogICAgY2FuY2VsTG9hZGluZzogZmFsc2UsCiAgICBjb250ZW50czogW10KICB9OwogIHZtLmRhdGEuY29udGVudHMucHVzaChjcmVhdGVSZWxheVNldHRpbmdDb250ZW50KHZtKSk7CiAgdm0uZGF0YS5jb250ZW50cy5wdXNoKGNyZWF0ZVJlbW90ZUNvbnRyb2xDb250ZW50KHZtKSk7CiAgdm0uZGF0YS5jb250ZW50cy5wdXNoKGNyZWF0ZU9wZW5SZWxheVZpYUh0dHBDb250ZW50KHZtKSk7CiAgdm0uZGF0YS5jb250ZW50cy5wdXNoKGNyZWF0ZVNvZnRrZXlJblRhbGtpbmdDb250ZW50KHZtKSk7CiAgdm0uZGF0YS5jb250ZW50cy5wdXNoKGNyZWF0ZVNvZnRrZXlJbkhvbWVPck1vcmVDb250ZW50KHZtKSk7CiAgdm0uZGF0YS5jb250ZW50cy5wdXNoKGNyZWF0ZVNvZnRrZXlJbk1vbml0b3JDb250ZW50KHZtKSk7CiAgdm0uZGF0YS5jb250ZW50cy5wdXNoKGNyZWF0ZVNvZnRrZXlJbkNhbGxQcmV2aWV3Q29udGVudCh2bSkpOwogIHZtLmRhdGEuY29udGVudHMucHVzaChjcmVhdGVSZW1vdGVSZWxheUJ5SHR0cENvbnRlbnQodm0pKTsKICB2bS5kYXRhLmNvbnRlbnRzLnB1c2goY3JlYXRlV2ViUmVsYXlDb250ZW50KHZtKSk7CiAgdm0uZGF0YS5jb250ZW50cy5wdXNoKGNyZWF0ZVdlYlJlbGF5QWN0aW9uU2V0dGluZ0NvbnRlbnQodm0pKTsKfQoKZnVuY3Rpb24gY3JlYXRlV2ViUmVsYXlBY3Rpb25TZXR0aW5nQ29udGVudCh2bSkgewogIC8vdGFibGUgZGF0YQogIHZhciB0YWJsZURhdGEgPSBbXTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5hcGlEYXRhLmRhdGEud2ViUmVsYXlBY3Rpb25NYXhOdW07IGkrKykgewogICAgdmFyIGl0ZW0gPSB7CiAgICAgIGtleTogaSwKICAgICAgYWN0aW9uSWQ6IHZtLiR0KCJXZWJSZWxheUNvbElkIikgKyAiICIgKyAoaSArIDEpLAogICAgICBpcDogewogICAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5XRUJSRUxBWS5XZWJSZWxheUlQIiArIGldLAogICAgICAgIGlzV2FybjogZmFsc2UsCiAgICAgICAgd2FybkxhYmVsOiB2bS4kdCgiVmFsdWVFbXB0eVdhcm5pbmciKQogICAgICB9LAogICAgICBzaXA6IHsKICAgICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuV0VCUkVMQVkuV2ViUmVsYXlTSVAiICsgaV0sCiAgICAgICAgaXNXYXJuOiBmYWxzZSwKICAgICAgICB3YXJuTGFiZWw6IHZtLiR0KCJWYWx1ZUVtcHR5V2FybmluZyIpCiAgICAgIH0sCiAgICAgIGFjdGlvbjogewogICAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5XRUJSRUxBWS5XZWJBY3Rpb24iICsgaV0sCiAgICAgICAgaXNXYXJuOiBmYWxzZSwKICAgICAgICB3YXJuTGFiZWw6IHZtLiR0KCJWYWx1ZUVtcHR5V2FybmluZyIpCiAgICAgIH0KICAgIH07CiAgICB0YWJsZURhdGEucHVzaChpdGVtKTsKICB9IC8vY29udGVudAoKCiAgdmFyIGNvbnRlbnQgPSB7CiAgICBrZXk6ICJ3ZWJSZWxheUFjdGlvblNldHRpbmciLAogICAgdGl0bGU6IHZtLiR0KCJXZWJSZWxheUFjdGlvblNldHRpbmciKSwKICAgIHRpdGxlRGVzY3JpcHRpb246IHZtLiR0KCJXZWJSZWxheUFjdGlvbkRlc2MiKSwKICAgIGl0ZW1zOiBbewogICAgICB0eXBlOiAidGFibGUiLAogICAgICBrZXk6ICJ3ZWJSZWxheUFjdGlvblNldHRpbmciLAogICAgICB0YWJsZUNvbHVtbnM6IFt7CiAgICAgICAgdHlwZTogImxhYmVsIiwKICAgICAgICB0aXRsZTogdm0uJHQoIldlYlJlbGF5Q29sSWQiKSwKICAgICAgICBkYXRhSW5kZXg6ICJhY3Rpb25JZCIsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsKICAgICAgICAgIGN1c3RvbVJlbmRlcjogImFjdGlvbklkIgogICAgICAgIH0sCiAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgIHNlbGVjdEl0ZW1zOiB2bS5zdGF0dXNJdGVtcywKICAgICAgICB3aWR0aDogIjEwJSIKICAgICAgfSwgewogICAgICAgIHR5cGU6ICJpbnB1dCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJJUCIpLAogICAgICAgIGRhdGFJbmRleDogImlwIiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAiaXAiCiAgICAgICAgfSwKICAgICAgICBhbGlnbjogImNlbnRlciIsCiAgICAgICAgd2lkdGg6ICIzMCUiLAogICAgICAgIG1heExlbmd0aDogMzIKICAgICAgfSwgewogICAgICAgIHR5cGU6ICJpbnB1dCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJTSVAiKSwKICAgICAgICBkYXRhSW5kZXg6ICJzaXAiLAogICAgICAgIHNjb3BlZFNsb3RzOiB7CiAgICAgICAgICBjdXN0b21SZW5kZXI6ICJzaXAiCiAgICAgICAgfSwKICAgICAgICBhbGlnbjogImNlbnRlciIsCiAgICAgICAgd2lkdGg6ICIzMCUiLAogICAgICAgIG1heExlbmd0aDogMzIKICAgICAgfSwgewogICAgICAgIHR5cGU6ICJpbnB1dCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJXZWJSZWxheUNvbEFjdGlvbiIpLAogICAgICAgIGRhdGFJbmRleDogImFjdGlvbiIsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsKICAgICAgICAgIGN1c3RvbVJlbmRlcjogImFjdGlvbiIKICAgICAgICB9LAogICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICB3aWR0aDogIjMwJSIsCiAgICAgICAgbWF4TGVuZ3RoOiAxMjcKICAgICAgfV0sCiAgICAgIHRhYmxlRGF0YTogdGFibGVEYXRhCiAgICB9XQogIH07CiAgcmV0dXJuIGNvbnRlbnQ7Cn0KCmZ1bmN0aW9uIGNyZWF0ZVdlYlJlbGF5Q29udGVudCh2bSkgewogIHZhciBjb250ZW50ID0gewogICAga2V5OiAid2ViUmVsYXkiLAogICAgdGl0bGU6IHZtLiR0KCJXZWJSZWxheSIpLAogICAgdGl0bGVEZXNjcmlwdGlvbjogdm0uJHQoIldlYlJlbGF5RGVzYyIpLAogICAgaXRlbXM6IFt7CiAgICAgIHRpdGxlOiB2bS4kdCgiV2ViUmVsYXlJUEFkZHJlc3MiKSwKICAgICAgdHlwZTogImlucHV0IiwKICAgICAga2V5OiAiQ29uZmlnLkRvb3JTZXR0aW5nLldFQlJFTEFZLklwQWRkcmVzcyIsCiAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5XRUJSRUxBWS5JcEFkZHJlc3MiXSwKICAgICAgaXNXYXJuOiBmYWxzZSwKICAgICAgd2FybkxhYmVsOiB2bS4kdCgiSXBGb3JtYXRFcnJvciIpLAogICAgICBkZXNjcmlwdGlvbjogdm0uJHQoIldlYlJlbGF5SVBEZXNjIikKICAgIH0sIHsKICAgICAgdGl0bGU6IHZtLiR0KCJXZWJSZWxheVVzZXIiKSwKICAgICAgdHlwZTogImlucHV0IiwKICAgICAga2V5OiAiQ29uZmlnLkRvb3JTZXR0aW5nLldFQlJFTEFZLlVzZXJOYW1lIiwKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLldFQlJFTEFZLlVzZXJOYW1lIl0sCiAgICAgIGRlc2NyaXB0aW9uOiB2bS4kdCgiV2ViUmVsYXlVc2VybmFtZURlc2MiKQogICAgfSwgewogICAgICB0aXRsZTogdm0uJHQoIldlYlJlbGF5UHdkIiksCiAgICAgIGlucHV0VHlwZTogInBhc3N3b3JkIiwKICAgICAgdHlwZTogImlucHV0IiwKICAgICAga2V5OiAiQ29uZmlnLkRvb3JTZXR0aW5nLldFQlJFTEFZLlBhc3N3ZCIsCiAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5XRUJSRUxBWS5QYXNzd2QiXSwKICAgICAgZGVzY3JpcHRpb246IHZtLiR0KCJXZWJSZWxheVBhc3NEZXNjIikKICAgIH1dCiAgfTsKICByZXR1cm4gY29udGVudDsKfQoKZnVuY3Rpb24gY3JlYXRlUmVtb3RlUmVsYXlCeUh0dHBDb250ZW50KHZtKSB7CiAgLy9kb29ybnVtIGl0ZW1zCiAgdmFyIGRvb3JOdW1JdGVtcyA9IFtdOwoKICBmb3IgKHZhciBpID0gMTsgaSA8PSA0OyBpKyspIHsKICAgIHZhciBpdGVtID0gewogICAgICBrZXk6IGksCiAgICAgIGxhYmVsOiBpCiAgICB9OwogICAgZG9vck51bUl0ZW1zLnB1c2goaXRlbSk7CiAgfSAvL3RhYmxlZGF0YQoKCiAgdmFyIHRhYmxlRGF0YSA9IFtdOwoKICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCB2bS5hcGlEYXRhLmRhdGEubWF4UmVtb3RlUmVsYXlOdW07IF9pMysrKSB7CiAgICB2YXIgX2l0ZW0gPSB7CiAgICAgIGtleTogX2kzLAogICAgICBpbmRleDogX2kzICsgMSwKICAgICAgcmVtb3RlSXA6IHsKICAgICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVNT1RFUkVMQVkuUmVtb3RlSVAiICsgX2kzXSwKICAgICAgICBpc1dhcm46IGZhbHNlLAogICAgICAgIHdhcm5MYWJlbDogdm0uJHQoIlZhbHVlRW1wdHlXYXJuaW5nIikKICAgICAgfSwKICAgICAgcmVtb3RlQWRkcmVzczogewogICAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRU1PVEVSRUxBWS5SZW1vdGVVUkwiICsgX2kzXSwKICAgICAgICBpc1dhcm46IGZhbHNlCiAgICAgIH0sCiAgICAgIHVzZXJuYW1lOiB7CiAgICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTU9URVJFTEFZLlJlbW90ZVVzZXIiICsgX2kzXSwKICAgICAgICBpc1dhcm46IGZhbHNlCiAgICAgIH0sCiAgICAgIHBhc3N3b3JkOiB7CiAgICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTU9URVJFTEFZLlJlbW90ZVBhc3N3ZCIgKyBfaTNdLAogICAgICAgIGlzV2FybjogZmFsc2UKICAgICAgfSwKICAgICAgZG9vck51bTogewogICAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRU1PVEVSRUxBWS5SZW1vdGVEb29yTnVtIiArIF9pM10ucmVwbGFjZSgvKF5zKil8KHMqJCkvZywgIiIpLmxlbmd0aCA9PSAwID8gW10gOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRU1PVEVSRUxBWS5SZW1vdGVEb29yTnVtIiArIF9pM10uc3BsaXQoIiwiKSwKICAgICAgICBpc1dhcm46IGZhbHNlCiAgICAgIH0KICAgIH07CgogICAgaWYgKF9pdGVtLnJlbW90ZUlwLnZhbHVlICE9ICIiKSB7CiAgICAgIHNob3dEZWxBbGxCdG4gPSB0cnVlOwogICAgfQoKICAgIHRhYmxlRGF0YS5wdXNoKF9pdGVtKTsKICB9IC8vY29udGVudAoKCiAgdmFyIGNvbnRlbnQgPSB7CiAgICBrZXk6ICJyZW1vdGVSZWxheUJ5SHR0cCIsCiAgICB0aXRsZTogdm0uJHQoIlJlbW90ZVJlbGF5U2V0dGluZyIpLAogICAgdGl0bGVEZXNjcmlwdGlvbjogdm0uJHQoIlJlbW90ZVJlbGF5QnlIdHRwRGVzYyIpLAogICAgaXRlbXM6IFt7CiAgICAgIHR5cGU6ICJ0YWJsZSIsCiAgICAgIGtleTogInJlbW90ZVJlbGF5QnlIdHRwIiwKICAgICAgc2hvd1Jvd1NlbGVjdGlvbjogdHJ1ZSwKICAgICAgc2VsZWN0ZWRSb3dLZXlzOiBbXSwKICAgICAgZ2V0Q2hlY2tib3hQcm9wc0Rpc2FibGU6IGZ1bmN0aW9uIGdldENoZWNrYm94UHJvcHNEaXNhYmxlKHJlY29yZCkgewogICAgICAgIHJldHVybiBjaGVja1JlbW90ZVJlbGF5SHR0cERpc2FibGUocmVjb3JkKTsKICAgICAgfSwKICAgICAgdGFibGVDb2x1bW5zOiBbewogICAgICAgIHR5cGU6ICJsYWJlbCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJJbmRleCIpLAogICAgICAgIGRhdGFJbmRleDogImluZGV4IiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAiaW5kZXgiCiAgICAgICAgfSwKICAgICAgICBhbGlnbjogImNlbnRlciIsCiAgICAgICAgd2lkdGg6ICI3JSIKICAgICAgfSwgewogICAgICAgIHR5cGU6ICJpbnB1dCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJSZW1vdGVSZWxheUlQIiksCiAgICAgICAgZGF0YUluZGV4OiAicmVtb3RlSXAiLAogICAgICAgIHNjb3BlZFNsb3RzOiB7CiAgICAgICAgICBjdXN0b21SZW5kZXI6ICJyZW1vdGVJcCIKICAgICAgICB9LAogICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICB3aWR0aDogIjE4JSIKICAgICAgfSwgewogICAgICAgIHR5cGU6ICJpbnB1dCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJSZW1vdGVSZWxheVVSTCIpLAogICAgICAgIGRhdGFJbmRleDogInJlbW90ZUFkZHJlc3MiLAogICAgICAgIHNjb3BlZFNsb3RzOiB7CiAgICAgICAgICBjdXN0b21SZW5kZXI6ICJyZW1vdGVBZGRyZXNzIgogICAgICAgIH0sCiAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgIHdpZHRoOiAiMTglIgogICAgICB9LCB7CiAgICAgICAgdHlwZTogImlucHV0IiwKICAgICAgICB0aXRsZTogdm0uJHQoIlJlbGF5VXNlck5hbWUiKSwKICAgICAgICBkYXRhSW5kZXg6ICJ1c2VybmFtZSIsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsKICAgICAgICAgIGN1c3RvbVJlbmRlcjogInVzZXJuYW1lIgogICAgICAgIH0sCiAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgIHdpZHRoOiAiMTglIgogICAgICB9LCB7CiAgICAgICAgdHlwZTogImlucHV0IiwKICAgICAgICB0aXRsZTogdm0uJHQoIlBhc3N3b3JkIiksCiAgICAgICAgZGF0YUluZGV4OiAicGFzc3dvcmQiLAogICAgICAgIHNjb3BlZFNsb3RzOiB7CiAgICAgICAgICBjdXN0b21SZW5kZXI6ICJwYXNzd29yZCIKICAgICAgICB9LAogICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICB3aWR0aDogIjE4JSIsCiAgICAgICAgaW5wdXRUeXBlOiAicGFzc3dvcmQiCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAic2VsZWN0IiwKICAgICAgICB0aXRsZTogdm0uJHQoIkRvb3JOdW0iKSwKICAgICAgICBkYXRhSW5kZXg6ICJkb29yTnVtIiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAiZG9vck51bSIKICAgICAgICB9LAogICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICB3aWR0aDogIjE4JSIsCiAgICAgICAgbW9kZTogIm11bHRpcGxlIiwKICAgICAgICBzZWxlY3RJdGVtczogZG9vck51bUl0ZW1zCiAgICAgIH1dLAogICAgICB0YWJsZURhdGE6IHRhYmxlRGF0YQogICAgfSwgewogICAgICB0eXBlOiAiZGVsZXRlLWJ1dHRvbiIsCiAgICAgIGtleTogInJlbW90ZVJlbGF5QnlIdHRwRGVsIiwKICAgICAgb25EZWw6IGZ1bmN0aW9uIG9uRGVsKCkgewogICAgICAgIG9uRGVsUmVsYXlCeUh0dHAodm0pOwogICAgICB9LAogICAgICBvbkRlbEFsbDogZnVuY3Rpb24gb25EZWxBbGwoKSB7CiAgICAgICAgb25EZWxBbGxSZWxheUJ5SHR0cCh2bSk7CiAgICAgIH0sCiAgICAgIGRlbExvYWRpbmc6IGZhbHNlLAogICAgICBkZWxBbGxMb2FkaW5nOiBmYWxzZSwKICAgICAgZGVsRGlzYWJsZWQ6IHRydWUsCiAgICAgIGRlbEFsbERpc2FibGVkOiB0cnVlCiAgICB9XQogIH07CiAgcmV0dXJuIGNvbnRlbnQ7Cn0KCmZ1bmN0aW9uIGNoZWNrUmVtb3RlUmVsYXlIdHRwRGlzYWJsZShyZWNvcmQpIHsKICBpZiAocmVjb3JkLnJlbW90ZUlwLnZhbHVlID09PSAiIikgewogICAgdmFyIG9iamVjdCA9IHsKICAgICAgZGlzYWJsZWQ6IHRydWUKICAgIH07CiAgICByZWNvcmQucHJvcHMgPSBvYmplY3Q7CiAgfQoKICByZXR1cm4gcmVjb3JkOwp9CgpmdW5jdGlvbiBvbkRlbFJlbGF5QnlIdHRwKHZtKSB7CiAgdmFyIGRlbERhdGEgPSB7fTsKICB2YXIgc2VsZWN0Um93ID0gZ2V0SXRlbUJ5S2V5KHZtLmRhdGEsICJyZW1vdGVSZWxheUJ5SHR0cCIsICJyZW1vdGVSZWxheUJ5SHR0cCIpLnNlbGVjdGVkUm93S2V5czsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RSb3cubGVuZ3RoOyBpKyspIHsKICAgIGRlbERhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRU1PVEVSRUxBWS5SZW1vdGVJUCIgKyBzZWxlY3RSb3dbaV1dID0gIiI7CiAgICBkZWxEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVNT1RFUkVMQVkuUmVtb3RlVVJMIiArIHNlbGVjdFJvd1tpXV0gPSAiIjsKICAgIGRlbERhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRU1PVEVSRUxBWS5SZW1vdGVVc2VyIiArIHNlbGVjdFJvd1tpXV0gPSAiIjsKICAgIGRlbERhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRU1PVEVSRUxBWS5SZW1vdGVQYXNzd2QiICsgc2VsZWN0Um93W2ldXSA9ICIiOwogICAgZGVsRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTU9URVJFTEFZLlJlbW90ZURvb3JOdW0iICsgc2VsZWN0Um93W2ldXSA9ICIxLDIsMyw0IjsKICB9CgogIGlmIChjb25maXJtKHZtLiR0KCJEZWxldGVTZWxlY3RlZENvbmZpcm0iKSkpIHsKICAgIHZhciByZXF1ZXN0RGF0YSA9IHsKICAgICAgdGFyZ2V0OiAicGhvbmVSZWxheSIsCiAgICAgIGFjdGlvbjogInNldCIsCiAgICAgIGNvbmZpZ0RhdGE6IGRlbERhdGEKICAgIH07CiAgICB2bS4kYXhpb3MucG9zdCgiYXBpIiwgcmVxdWVzdERhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIHNob3dSZXF1ZXN0U3VjY2Vzcyh2bSk7CiAgICAgIGdldERhdGEodm0pOwogICAgfSk7CiAgfQp9CgpmdW5jdGlvbiBvbkRlbEFsbFJlbGF5QnlIdHRwKHZtKSB7CiAgdmFyIGRlbEFsbERhdGEgPSB7fTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5hcGlEYXRhLmRhdGEubWF4UmVtb3RlUmVsYXlOdW07IGkrKykgewogICAgZGVsQWxsRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTU9URVJFTEFZLlJlbW90ZUlQIiArIGldID0gIiI7CiAgICBkZWxBbGxEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVNT1RFUkVMQVkuUmVtb3RlVVJMIiArIGldID0gIiI7CiAgICBkZWxBbGxEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVNT1RFUkVMQVkuUmVtb3RlVXNlciIgKyBpXSA9ICIiOwogICAgZGVsQWxsRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTU9URVJFTEFZLlJlbW90ZVBhc3N3ZCIgKyBpXSA9ICIiOwogICAgZGVsQWxsRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTU9URVJFTEFZLlJlbW90ZURvb3JOdW0iICsgaV0gPSAiMSwyLDMsNCI7CiAgfQoKICBpZiAoY29uZmlybSh2bS4kdCgiRGVsZXRlQWxsQ29uZmlybSIpKSkgewogICAgdmFyIHJlcXVlc3REYXRhID0gewogICAgICB0YXJnZXQ6ICJwaG9uZVJlbGF5IiwKICAgICAgYWN0aW9uOiAic2V0IiwKICAgICAgY29uZmlnRGF0YTogZGVsQWxsRGF0YQogICAgfTsKICAgIHZtLiRheGlvcy5wb3N0KCJhcGkiLCByZXF1ZXN0RGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgc2hvd1JlcXVlc3RTdWNjZXNzKHZtKTsKICAgICAgZ2V0RGF0YSh2bSk7CiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIGNyZWF0ZVNvZnRrZXlJbkNhbGxQcmV2aWV3Q29udGVudCh2bSkgewogIC8vdGFibGUgZGF0YQogIHZhciB0YWJsZURhdGEgPSBbewogICAga2V5OiAwLAogICAgc3RhdHVzOiB7CiAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5JbmNvbWluZ1N0YXR1cyJdLAogICAgICBpc1dhcm46IGZhbHNlCiAgICB9LAogICAgZGlzcGxheU5hbWU6IHsKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkluY29taW5nRGlzcGxheU5hbWUiXSwKICAgICAgaXNXYXJuOiBmYWxzZQogICAgfSwKICAgIHR5cGU6IHsKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkluY29taW5nUmVsYXlUeXBlIl0sCiAgICAgIGlzV2FybjogZmFsc2UKICAgIH0KICB9XTsgLy90eXBlIGl0ZW1zCgogIHZhciB0eXBlSXRlbXMgPSBbXTsKCiAgaWYgKHZtLmFwaURhdGEuZGF0YS5zdXBwb3J0UmVsYXlCID09IDEpIHsKICAgIHR5cGVJdGVtcy5wdXNoKHsKICAgICAga2V5OiAwLAogICAgICBsYWJlbDogdm0uJHQoIkxvY2FsUmVsYXkiKSArICIxIgogICAgfSk7CiAgICB0eXBlSXRlbXMucHVzaCh7CiAgICAgIGtleTogMSwKICAgICAgbGFiZWw6IHZtLiR0KCJMb2NhbFJlbGF5IikgKyAiMiIKICAgIH0pOwogIH0gZWxzZSB7CiAgICB0eXBlSXRlbXMucHVzaCh7CiAgICAgIGtleTogMCwKICAgICAgbGFiZWw6IHZtLiR0KCJMb2NhbFJlbGF5IikKICAgIH0pOwogIH0KCiAgdHlwZUl0ZW1zLnB1c2goewogICAga2V5OiAzLAogICAgbGFiZWw6IHZtLiR0KCJSZW1vdGVSZWxheUhUVFAiKQogIH0pOwogIHR5cGVJdGVtcy5wdXNoKHsKICAgIGtleTogNCwKICAgIGxhYmVsOiB2bS4kdCgiV2ViUmVsYXlBY3Rpb24iKQogIH0pOwoKICBpZiAodm0uYXBpRGF0YS5kYXRhLmNvbm5lY3RNb2RlID09IDIpIHsKICAgIHR5cGVJdGVtcy5wdXNoKHsKICAgICAga2V5OiAxNiwKICAgICAgbGFiZWw6IHZtLiR0KCJDb25maWdPbkNsb3VkIikKICAgIH0pOwogIH0gLy9jb250ZW50CgoKICB2YXIgY29udGVudCA9IHsKICAgIGtleTogInNvZnRrZXlJbkNhbGxQcmV2aWV3IiwKICAgIHRpdGxlOiB2bS4kdCgiQ2FsbFByZXZpZXdQYWdlVGl0bGUiKSwKICAgIHRpdGxlRGVzY3JpcHRpb246IHZtLiR0KCJTb2Z0a2V5SW5DYWxsRGVzYyIpLAogICAgaXRlbXM6IFt7CiAgICAgIHR5cGU6ICJ0YWJsZSIsCiAgICAgIGtleTogInNvZnRrZXlJbkNhbGxQcmV2aWV3IiwKICAgICAgdGFibGVDb2x1bW5zOiBbewogICAgICAgIHR5cGU6ICJzZWxlY3QiLAogICAgICAgIHRpdGxlOiB2bS4kdCgiU3RhdHVzIiksCiAgICAgICAgZGF0YUluZGV4OiAic3RhdHVzIiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAic3RhdHVzIgogICAgICAgIH0sCiAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgIHNlbGVjdEl0ZW1zOiB2bS5zdGF0dXNJdGVtcywKICAgICAgICB3aWR0aDogIjMwJSIKICAgICAgfSwgewogICAgICAgIHR5cGU6ICJpbnB1dCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJEaXNwbGF5TmFtZSIpLAogICAgICAgIGRhdGFJbmRleDogImRpc3BsYXlOYW1lIiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAiZGlzcGxheU5hbWUiCiAgICAgICAgfSwKICAgICAgICBhbGlnbjogImNlbnRlciIsCiAgICAgICAgd2lkdGg6ICIzMCUiCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAic2VsZWN0IiwKICAgICAgICB0aXRsZTogdm0uJHQoIlR5cGUiKSwKICAgICAgICBkYXRhSW5kZXg6ICJ0eXBlIiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAidHlwZSIKICAgICAgICB9LAogICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICBzZWxlY3RJdGVtczogdHlwZUl0ZW1zLAogICAgICAgIHdpZHRoOiAiNDAlIgogICAgICB9XSwKICAgICAgdGFibGVEYXRhOiB0YWJsZURhdGEKICAgIH1dCiAgfTsKICByZXR1cm4gY29udGVudDsKfQoKZnVuY3Rpb24gY3JlYXRlU29mdGtleUluTW9uaXRvckNvbnRlbnQodm0pIHsKICAvL3RhYmxlIGRhdGEKICB2YXIgdGFibGVEYXRhID0gW3sKICAgIGtleTogMCwKICAgIHN0YXR1czogewogICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuTW9uaXRvclN0YXR1cyJdLAogICAgICBpc1dhcm46IGZhbHNlCiAgICB9LAogICAgZGlzcGxheU5hbWU6IHsKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLk1vbml0b3JEaXNwbGF5TmFtZSJdLAogICAgICBpc1dhcm46IGZhbHNlCiAgICB9LAogICAgdHlwZTogewogICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuTW9uaXRvclJlbGF5VHlwZSJdLAogICAgICBpc1dhcm46IGZhbHNlCiAgICB9CiAgfV07IC8vdHlwZSBpdGVtcwoKICB2YXIgdHlwZUl0ZW1zID0gW107CgogIGlmICh2bS5hcGlEYXRhLmRhdGEuc3VwcG9ydFJlbGF5QiA9PSAxKSB7CiAgICB0eXBlSXRlbXMucHVzaCh7CiAgICAgIGtleTogMCwKICAgICAgbGFiZWw6IHZtLiR0KCJMb2NhbFJlbGF5IikgKyAiMSIKICAgIH0pOwogICAgdHlwZUl0ZW1zLnB1c2goewogICAgICBrZXk6IDEsCiAgICAgIGxhYmVsOiB2bS4kdCgiTG9jYWxSZWxheSIpICsgIjIiCiAgICB9KTsKICB9IGVsc2UgewogICAgdHlwZUl0ZW1zLnB1c2goewogICAgICBrZXk6IDAsCiAgICAgIGxhYmVsOiB2bS4kdCgiTG9jYWxSZWxheSIpCiAgICB9KTsKICB9CgogIHR5cGVJdGVtcy5wdXNoKHsKICAgIGtleTogMywKICAgIGxhYmVsOiB2bS4kdCgiUmVtb3RlUmVsYXlIVFRQIikKICB9KTsKICB0eXBlSXRlbXMucHVzaCh7CiAgICBrZXk6IDQsCiAgICBsYWJlbDogdm0uJHQoIldlYlJlbGF5QWN0aW9uIikKICB9KTsKCiAgaWYgKHZtLmFwaURhdGEuZGF0YS5jb25uZWN0TW9kZSA9PSAyKSB7CiAgICB0eXBlSXRlbXMucHVzaCh7CiAgICAgIGtleTogMTYsCiAgICAgIGxhYmVsOiB2bS4kdCgiQ29uZmlnT25DbG91ZCIpCiAgICB9KTsKICB9IC8vY29udGVudAoKCiAgdmFyIGNvbnRlbnQgPSB7CiAgICBrZXk6ICJzb2Z0a2V5SW5Nb25pdG9yIiwKICAgIHRpdGxlOiB2bS4kdCgiTW9uaXRvclBhZ2VUaXRsZSIpLAogICAgdGl0bGVEZXNjcmlwdGlvbjogdm0uJHQoIlNvZnRLZXlJbk1vbml0b3JEZXNjIiksCiAgICBpdGVtczogW3sKICAgICAgdHlwZTogInRhYmxlIiwKICAgICAga2V5OiAic29mdGtleUluTW9uaXRvciIsCiAgICAgIHRhYmxlQ29sdW1uczogW3sKICAgICAgICB0eXBlOiAic2VsZWN0IiwKICAgICAgICB0aXRsZTogdm0uJHQoIlN0YXR1cyIpLAogICAgICAgIGRhdGFJbmRleDogInN0YXR1cyIsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsKICAgICAgICAgIGN1c3RvbVJlbmRlcjogInN0YXR1cyIKICAgICAgICB9LAogICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICBzZWxlY3RJdGVtczogdm0uc3RhdHVzSXRlbXMsCiAgICAgICAgd2lkdGg6ICIzMCUiCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAiaW5wdXQiLAogICAgICAgIHRpdGxlOiB2bS4kdCgiRGlzcGxheU5hbWUiKSwKICAgICAgICBkYXRhSW5kZXg6ICJkaXNwbGF5TmFtZSIsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsKICAgICAgICAgIGN1c3RvbVJlbmRlcjogImRpc3BsYXlOYW1lIgogICAgICAgIH0sCiAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgIHdpZHRoOiAiMzAlIgogICAgICB9LCB7CiAgICAgICAgdHlwZTogInNlbGVjdCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJUeXBlIiksCiAgICAgICAgZGF0YUluZGV4OiAidHlwZSIsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsKICAgICAgICAgIGN1c3RvbVJlbmRlcjogInR5cGUiCiAgICAgICAgfSwKICAgICAgICBhbGlnbjogImNlbnRlciIsCiAgICAgICAgc2VsZWN0SXRlbXM6IHR5cGVJdGVtcywKICAgICAgICB3aWR0aDogIjQwJSIKICAgICAgfV0sCiAgICAgIHRhYmxlRGF0YTogdGFibGVEYXRhCiAgICB9XQogIH07CiAgcmV0dXJuIGNvbnRlbnQ7Cn0KCmZ1bmN0aW9uIGNyZWF0ZVNvZnRrZXlJbkhvbWVPck1vcmVDb250ZW50KHZtKSB7CiAgLy90YWJsZSBkYXRhCiAgdmFyIHRhYmxlRGF0YSA9IFt7CiAgICBrZXk6IDAsCiAgICBzdGF0dXM6IHsKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLklkbGVTdGF0dXMiXSwKICAgICAgaXNXYXJuOiBmYWxzZSwKICAgICAgZGlzYWJsZWQ6IHRydWUKICAgIH0sCiAgICBkaXNwbGF5TmFtZTogewogICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuSWRsZURpc3BsYXlOYW1lIl0sCiAgICAgIGlzV2FybjogZmFsc2UKICAgIH0sCiAgICB0eXBlOiB7CiAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5JZGxlUmVsYXlUeXBlIl0sCiAgICAgIGlzV2FybjogZmFsc2UKICAgIH0KICB9XTsgLy90eXBlIGl0ZW1zCgogIHZhciB0eXBlSXRlbXMgPSBbXTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5hcGlEYXRhLmRhdGEubWF4UmVtb3RlUmVsYXlOdW07IGkrKykgewogICAgdmFyIGl0ZW0gPSB7CiAgICAgIGtleTogaSArIDEsCiAgICAgIGxhYmVsOiB2bS4kdCgiUmVtb3RlUmVsYXlIVFRQIikgKyAoaSArIDEpCiAgICB9OwogICAgdHlwZUl0ZW1zLnB1c2goaXRlbSk7CiAgfSAvL2NvbnRlbnQKCgogIHZhciBjb250ZW50ID0gewogICAga2V5OiAic29mdGtleUluSG9tZU9yTW9yZSIsCiAgICB0aXRsZTogdm0uJHQoIkhvbWVPck1vcmVQYWdlVGl0bGUiKSwKICAgIHRpdGxlRGVzY3JpcHRpb246IHZtLiR0KCJTb2Z0a2V5SW5Ib21lRGVzYyIpLAogICAgaXRlbXM6IFt7CiAgICAgIHR5cGU6ICJ0YWJsZSIsCiAgICAgIGtleTogInNvZnRrZXlJbkhvbWVPck1vcmUiLAogICAgICB0YWJsZUNvbHVtbnM6IFt7CiAgICAgICAgdHlwZTogInNlbGVjdCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJTdGF0dXMiKSwKICAgICAgICBkYXRhSW5kZXg6ICJzdGF0dXMiLAogICAgICAgIHNjb3BlZFNsb3RzOiB7CiAgICAgICAgICBjdXN0b21SZW5kZXI6ICJzdGF0dXMiCiAgICAgICAgfSwKICAgICAgICBhbGlnbjogImNlbnRlciIsCiAgICAgICAgc2VsZWN0SXRlbXM6IHZtLnN0YXR1c0l0ZW1zLAogICAgICAgIHdpZHRoOiAiMzAlIgogICAgICB9LCB7CiAgICAgICAgdHlwZTogImlucHV0IiwKICAgICAgICB0aXRsZTogdm0uJHQoIkRpc3BsYXlOYW1lIiksCiAgICAgICAgZGF0YUluZGV4OiAiZGlzcGxheU5hbWUiLAogICAgICAgIHNjb3BlZFNsb3RzOiB7CiAgICAgICAgICBjdXN0b21SZW5kZXI6ICJkaXNwbGF5TmFtZSIKICAgICAgICB9LAogICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICB3aWR0aDogIjMwJSIKICAgICAgfSwgewogICAgICAgIHR5cGU6ICJzZWxlY3QiLAogICAgICAgIHRpdGxlOiB2bS4kdCgiVHlwZSIpLAogICAgICAgIGRhdGFJbmRleDogInR5cGUiLAogICAgICAgIHNjb3BlZFNsb3RzOiB7CiAgICAgICAgICBjdXN0b21SZW5kZXI6ICJ0eXBlIgogICAgICAgIH0sCiAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgIHNlbGVjdEl0ZW1zOiB0eXBlSXRlbXMsCiAgICAgICAgd2lkdGg6ICI0MCUiCiAgICAgIH1dLAogICAgICB0YWJsZURhdGE6IHRhYmxlRGF0YQogICAgfV0KICB9OwogIHJldHVybiBjb250ZW50Owp9CgpmdW5jdGlvbiBjcmVhdGVTb2Z0a2V5SW5UYWxraW5nQ29udGVudCh2bSkgewogIC8vdHlwZSBpdGVtcwogIHZhciB0eXBlSXRlbXMgPSBbXTsKICB0eXBlSXRlbXMucHVzaCh7CiAgICBrZXk6IDMsCiAgICBsYWJlbDogdm0uJHQoIlJlbW90ZVJlbGF5SFRUUCIpCiAgfSk7CgogIGlmICh2bS5hcGlEYXRhLmRhdGEubWF4UmVsYXlTb2Z0a2V5TnVtID09IDMpIHsKICAgIGlmICh2bS5hcGlEYXRhLmRhdGEuc3VwcG9ydFRocmVlRHRtZiA9PSAxKSB7CiAgICAgIHR5cGVJdGVtcy5wdXNoKHsKICAgICAgICBrZXk6IDIsCiAgICAgICAgbGFiZWw6IHZtLiR0KCJSZW1vdGVSZWxheURUTUYiKSArICIxIgogICAgICB9KTsKICAgICAgdHlwZUl0ZW1zLnB1c2goewogICAgICAgIGtleTogMTQsCiAgICAgICAgbGFiZWw6IHZtLiR0KCJSZW1vdGVSZWxheURUTUYiKSArICIyIgogICAgICB9KTsKICAgICAgdHlwZUl0ZW1zLnB1c2goewogICAgICAgIGtleTogMTUsCiAgICAgICAgbGFiZWw6IHZtLiR0KCJSZW1vdGVSZWxheURUTUYiKSArICIzIgogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHR5cGVJdGVtcy5wdXNoKHsKICAgICAgICBrZXk6IDIsCiAgICAgICAgbGFiZWw6IHZtLiR0KCJSZW1vdGVSZWxheURUTUYiKQogICAgICB9KTsKICAgIH0KCiAgICBpZiAodm0uYXBpRGF0YS5kYXRhLnN1cHBvcnRSZWxheUIgPT0gMSkgewogICAgICB0eXBlSXRlbXMucHVzaCh7CiAgICAgICAga2V5OiAwLAogICAgICAgIGxhYmVsOiB2bS4kdCgiTG9jYWxSZWxheSIpICsgIjEiCiAgICAgIH0pOwogICAgICB0eXBlSXRlbXMucHVzaCh7CiAgICAgICAga2V5OiAxLAogICAgICAgIGxhYmVsOiB2bS4kdCgiTG9jYWxSZWxheSIpICsgIjIiCiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgdHlwZUl0ZW1zLnB1c2goewogICAgICAgIGtleTogMCwKICAgICAgICBsYWJlbDogdm0uJHQoIkxvY2FsUmVsYXkiKQogICAgICB9KTsKICAgIH0KICB9IGVsc2UgewogICAgdHlwZUl0ZW1zLnB1c2goewogICAgICBrZXk6IDIsCiAgICAgIGxhYmVsOiB2bS4kdCgiUmVtb3RlUmVsYXlEVE1GIikKICAgIH0pOwogICAgdHlwZUl0ZW1zLnB1c2goewogICAgICBrZXk6IDAsCiAgICAgIGxhYmVsOiB2bS4kdCgiTG9jYWxSZWxheSIpCiAgICB9KTsKICB9CgogIHR5cGVJdGVtcy5wdXNoKHsKICAgIGtleTogNCwKICAgIGxhYmVsOiB2bS4kdCgiV2ViUmVsYXlBY3Rpb25WYWx1ZSIpCiAgfSk7CgogIGlmICh2bS5hcGlEYXRhLmRhdGEuY29ubmVjdE1vZGUgPT0gMikgewogICAgdHlwZUl0ZW1zLnB1c2goewogICAgICBrZXk6IDE2LAogICAgICBsYWJlbDogdm0uJHQoIkNvbmZpZ09uQ2xvdWQiKQogICAgfSk7CiAgfSAvL3RhYmxlIGRhdGEKCgogIHZhciB0YWJsZURhdGEgPSBbXTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5hcGlEYXRhLmRhdGEubWF4UmVsYXlTb2Z0a2V5TnVtOyBpKyspIHsKICAgIHZhciBpdGVtID0gewogICAgICBrZXk6IGksCiAgICAgIGtleUxhYmVsOiB2bS4kdCgiS2V5IikgKyAoaSArIDEpLAogICAgICBzdGF0dXM6IHsKICAgICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuVGFsa2luZ1N0YXR1cyIgKyAoaSArIDEpXSwKICAgICAgICBpc1dhcm46IGZhbHNlCiAgICAgIH0sCiAgICAgIGRpc3BsYXlOYW1lOiB7CiAgICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLlRhbGtpbmdDb2xEaXNwbGF5TmFtZSIgKyAoaSArIDEpXSwKICAgICAgICBpc1dhcm46IGZhbHNlCiAgICAgIH0sCiAgICAgIHR5cGU6IHsKICAgICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuVGFsa2luZ1JlbGF5VHlwZSIgKyAoaSArIDEpXSwKICAgICAgICBpc1dhcm46IGZhbHNlCiAgICAgIH0KICAgIH07CiAgICB0YWJsZURhdGEucHVzaChpdGVtKTsKICB9IC8vY29udGVudAoKCiAgdmFyIGNvbnRlbnQgPSB7CiAgICBrZXk6ICJzb2Z0a2V5SW5UYWxraW5nIiwKICAgIHRpdGxlOiB2bS4kdCgiU29mdEtleUluVGFsa2luZyIpLAogICAgdGl0bGVEZXNjcmlwdGlvbjogdm0uJHQoIlNvZnRrZXlJblRhbGtEZXNjIiksCiAgICBpdGVtczogW3sKICAgICAgdHlwZTogInRhYmxlIiwKICAgICAga2V5OiAic29mdGtleUluVGFsa2luZyIsCiAgICAgIHRhYmxlQ29sdW1uczogW3sKICAgICAgICB0eXBlOiAibGFiZWwiLAogICAgICAgIHRpdGxlOiB2bS4kdCgiS2V5IiksCiAgICAgICAgZGF0YUluZGV4OiAia2V5TGFiZWwiLAogICAgICAgIHNjb3BlZFNsb3RzOiB7CiAgICAgICAgICBjdXN0b21SZW5kZXI6ICJrZXlMYWJlbCIKICAgICAgICB9LAogICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICB3aWR0aDogIjEwJSIKICAgICAgfSwgewogICAgICAgIHR5cGU6ICJzZWxlY3QiLAogICAgICAgIHRpdGxlOiB2bS4kdCgiU3RhdHVzIiksCiAgICAgICAgZGF0YUluZGV4OiAic3RhdHVzIiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAic3RhdHVzIgogICAgICAgIH0sCiAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgIHNlbGVjdEl0ZW1zOiB2bS5zdGF0dXNJdGVtcywKICAgICAgICB3aWR0aDogIjMwJSIKICAgICAgfSwgewogICAgICAgIHR5cGU6ICJpbnB1dCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJEaXNwbGF5TmFtZSIpLAogICAgICAgIGRhdGFJbmRleDogImRpc3BsYXlOYW1lIiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAiZGlzcGxheU5hbWUiCiAgICAgICAgfSwKICAgICAgICBhbGlnbjogImNlbnRlciIsCiAgICAgICAgd2lkdGg6ICIzMCUiCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAic2VsZWN0IiwKICAgICAgICB0aXRsZTogdm0uJHQoIlR5cGUiKSwKICAgICAgICBkYXRhSW5kZXg6ICJ0eXBlIiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAidHlwZSIKICAgICAgICB9LAogICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICBzZWxlY3RJdGVtczogdHlwZUl0ZW1zLAogICAgICAgIHdpZHRoOiAiMzAlIgogICAgICB9XSwKICAgICAgdGFibGVEYXRhOiB0YWJsZURhdGEKICAgIH1dCiAgfTsKICByZXR1cm4gY29udGVudDsKfQoKZnVuY3Rpb24gY3JlYXRlT3BlblJlbGF5VmlhSHR0cENvbnRlbnQodm0pIHsKICB2YXIgY29udGVudCA9IHsKICAgIGtleTogIm9wZW5SZWxheVZpYUh0dHAiLAogICAgdGl0bGU6IHZtLiR0KCJPcGVuUmVsYXlTZXR0aW5nIiksCiAgICB0aXRsZURlc2NyaXB0aW9uOiB2bS4kdCgiT3BlblJlbGF5VmlhRGVzYyIpLAogICAgaXRlbXM6IFt7CiAgICAgIHRpdGxlOiB2bS4kdCgiU3dpdGNoIiksCiAgICAgIHR5cGU6ICJjaGVja2JveCIsCiAgICAgIGtleTogIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5SZWxheU9uV2ViIiwKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLlJlbGF5T25XZWIiXSwKICAgICAgZGVzY3JpcHRpb246IHZtLiR0KCJTd2l0Y2hEZXNjIikKICAgIH0sIHsKICAgICAgdGl0bGU6IHZtLiR0KCJSZW1vdGVSZWxheVVzZXIiKSwKICAgICAgdHlwZTogImlucHV0IiwKICAgICAga2V5OiAiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLlJlbGF5T25XZWJVc2VyIiwKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLlJlbGF5T25XZWJVc2VyIl0sCiAgICAgIGRpc2FibGVkOiBmYWxzZSwKICAgICAgZGVzY3JpcHRpb246IHZtLiR0KCJSZWxheVVzZXJuYW1lRGVzYyIpCiAgICB9LCB7CiAgICAgIHRpdGxlOiB2bS4kdCgiUmVtb3RlUmVsYXlQYXNzd2QiKSwKICAgICAgdHlwZTogImlucHV0IiwKICAgICAga2V5OiAiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLlJlbGF5T25XZWJQd2QiLAogICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuUmVsYXlPbldlYlB3ZCJdLAogICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgIGlucHV0VHlwZTogInBhc3N3b3JkIiwKICAgICAgZGVzY3JpcHRpb246IHZtLiR0KCJSZWxheVBhc3N3b3JkRGVzYyIpCiAgICB9XQogIH07CiAgcmV0dXJuIGNvbnRlbnQ7Cn0KCmZ1bmN0aW9uIGNyZWF0ZVJlbW90ZUNvbnRyb2xDb250ZW50KHZtKSB7CiAgdmFyIGNvbnRlbnQgPSB7CiAgICBrZXk6ICJyZW1vdGVDb250cm9sIiwKICAgIHRpdGxlOiB2bS4kdCgiUmVtb3RlQ29udHJvbCIpLAogICAgdGl0bGVEZXNjcmlwdGlvbjogdm0uJHQoIlJlbW90ZUNvbnRyb2xsZXJUaURlc2MiKSwKICAgIGl0ZW1zOiBbewogICAgICB0aXRsZTogdm0uJHQoIkFsbG93ZWRBY2Nlc3NJUExpc3QiKSwKICAgICAgdHlwZTogImlucHV0IiwKICAgICAga2V5OiAiQ29uZmlnLkZlYXR1cmVzLlJFTU9URUNPTlRST0wuQWN0aW9uVVJJQWxsb3dJUExpc3QiLAogICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRmVhdHVyZXMuUkVNT1RFQ09OVFJPTC5BY3Rpb25VUklBbGxvd0lQTGlzdCJdLAogICAgICBpc1dhcm46IGZhbHNlLAogICAgICB3YXJuTGFiZWw6IHZtLiR0KCJQbGVhc2VDaGVja0FsYXJtU3VibWl0RGF0YSIpLAogICAgICBkZXNjcmlwdGlvbjogdm0uJHQoIkFsbG93QWNjZXNzSVBEZXNjIikKICAgIH1dCiAgfTsKICByZXR1cm4gY29udGVudDsKfQoKZnVuY3Rpb24gY3JlYXRlUmVsYXlTZXR0aW5nQ29udGVudCh2bSkgewogIC8vZGVsYXkgaXRlbXMKICB2YXIgZGVsYXlJdGVtcyA9IFtdOwoKICBmb3IgKHZhciBpID0gMDsgaSA8PSA2MDsgaSsrKSB7CiAgICB2YXIgaXRlbSA9IHsKICAgICAga2V5OiBpLAogICAgICBsYWJlbDogaQogICAgfTsKICAgIGRlbGF5SXRlbXMucHVzaChpdGVtKTsKICB9CgogIGRlbGF5SXRlbXMucHVzaCh7CiAgICBrZXk6IC0xLAogICAgbGFiZWw6IHZtLiR0KCJOZXZlciIpCiAgfSk7IC8vcmVsYXkgdHlwZQoKICB2YXIgcmVsYXlUeXBlSXRlbXMgPSBbXTsKICByZWxheVR5cGVJdGVtcy5wdXNoKHsKICAgIGtleTogMCwKICAgIGxhYmVsOiB2bS4kdCgiT3BlbkRvb3IiKQogIH0pOwoKICBpZiAodm0uYXBpRGF0YS5kYXRhLmNoaW1lQmVsbFR5cGUgPT0gMSkgewogICAgcmVsYXlUeXBlSXRlbXMucHVzaCh7CiAgICAgIGtleTogMSwKICAgICAgbGFiZWw6IHZtLiR0KCJFeHRlbnNpb25TcGVha2VyIikKICAgIH0pOwogIH0gZWxzZSBpZiAodm0uYXBpRGF0YS5kYXRhLmNoaW1lQmVsbFR5cGUgPT0gMikgewogICAgcmVsYXlUeXBlSXRlbXMucHVzaCh7CiAgICAgIGtleTogMiwKICAgICAgbGFiZWw6IHZtLiR0KCJDaGltZUJlbGwiKQogICAgfSk7CiAgfSBlbHNlIHsKICAgIHJlbGF5VHlwZUl0ZW1zLnB1c2goewogICAgICBrZXk6IDIsCiAgICAgIGxhYmVsOiB2bS4kdCgiQ2hpbWVCZWxsIikKICAgIH0pOwoKICAgIGlmICh2bS5hcGlEYXRhLmRhdGEuc3VwcG9ydEhpZGVTT1NBY3Rpb24gIT0gMSkgewogICAgICByZWxheVR5cGVJdGVtcy5wdXNoKHsKICAgICAgICBrZXk6IDMsCiAgICAgICAgbGFiZWw6IHZtLiR0KCJTT1NBY3Rpb24iKQogICAgICB9KTsKICAgIH0KICB9CgogIHZhciBjb250ZW50ID0gewogICAga2V5OiAicmVsYXlTZXR0aW5nIiwKICAgIHRpdGxlOiB2bS4kdCgiUmVsYXlTZXR0aW5nIiksCiAgICB0aXRsZURlc2NyaXB0aW9uOiB2bS4kdCgiUmVsYXlTZXR0aW5nRGVzYyIpLAogICAgaXRlbXM6IFt7CiAgICAgIHRpdGxlOiB2bS4kdCgiTG9jYWxSZWxheSIpICsgIjEiLAogICAgICB0eXBlOiAibGFiZWwiLAogICAgICBrZXk6ICJsb2NhbFJlbGF5MSIsCiAgICAgIHZhbHVlOiAiIiwKICAgICAgdGl0bGVCb2xkOiB0cnVlCiAgICB9LCB7CiAgICAgIHRpdGxlOiB2bS4kdCgiUmVsYXlEZWxheU5hbWUxIiksCiAgICAgIHR5cGU6ICJzZWxlY3QiLAogICAgICBrZXk6ICJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuRGVsYXkxIiwKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkRlbGF5MSJdLAogICAgICBzZWxlY3RJdGVtczogZGVsYXlJdGVtcywKICAgICAgZGVzY3JpcHRpb246IHZtLiR0KCJSZWxheURlbGF5RGVzYyIpCiAgICB9LCB7CiAgICAgIHRpdGxlOiB2bS4kdCgiTG9jYWxSZWxheVR5cGVOYW1lMSIpLAogICAgICB0eXBlOiAic2VsZWN0IiwKICAgICAga2V5OiAiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkxvY2FsUmVsYXlUeXBlMSIsCiAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5Mb2NhbFJlbGF5VHlwZTEiXSwKICAgICAgc2VsZWN0SXRlbXM6IHJlbGF5VHlwZUl0ZW1zLAogICAgICBkZXNjcmlwdGlvbjogdm0uJHQoIlJlbGF5VHlwZURlc2MiKQogICAgfSwgewogICAgICB0aXRsZTogdm0uJHQoIlJlbW90ZUNvbnRyb2wiKSwKICAgICAgdHlwZTogInNlbGVjdCIsCiAgICAgIGtleTogIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5SZW1vdGVDb250cm9sIiwKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLlJlbW90ZUNvbnRyb2wiXSwKICAgICAgc2VsZWN0SXRlbXM6IHZtLnN0YXR1c0l0ZW1zLAogICAgICBkZXNjcmlwdGlvbjogdm0uJHQoIlJlbW90ZUNvbnRyb2xEZXNjIikKICAgIH0sIHsKICAgICAgdGl0bGU6IHZtLiR0KCJEVE1GIiksCiAgICAgIHR5cGU6ICJpbnB1dCIsCiAgICAgIGtleTogIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5Mb2NhbERUTUYiLAogICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuTG9jYWxEVE1GIl0sCiAgICAgIGRlc2NyaXB0aW9uOiB2bS4kdCgiUmVsYXlEVE1GRGVzYyIpCiAgICB9LCB7CiAgICAgIHRpdGxlOiB2bS4kdCgiTG9jYWxSZWxheSIpICsgIjIiLAogICAgICB0eXBlOiAibGFiZWwiLAogICAgICBrZXk6ICJsb2NhbFJlbGF5MiIsCiAgICAgIHZhbHVlOiAiIiwKICAgICAgdGl0bGVCb2xkOiB0cnVlCiAgICB9LCB7CiAgICAgIHRpdGxlOiB2bS4kdCgiUmVsYXlEZWxheU5hbWUyIiksCiAgICAgIHR5cGU6ICJzZWxlY3QiLAogICAgICBrZXk6ICJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuRGVsYXkyIiwKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkRlbGF5MiJdLAogICAgICBzZWxlY3RJdGVtczogZGVsYXlJdGVtcywKICAgICAgZGVzY3JpcHRpb246IHZtLiR0KCJSZWxheURlbGF5RGVzYyIpCiAgICB9LCB7CiAgICAgIHRpdGxlOiB2bS4kdCgiTG9jYWxSZWxheVR5cGVOYW1lMiIpLAogICAgICB0eXBlOiAic2VsZWN0IiwKICAgICAga2V5OiAiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkxvY2FsUmVsYXlUeXBlMiIsCiAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5Mb2NhbFJlbGF5VHlwZTIiXSwKICAgICAgc2VsZWN0SXRlbXM6IHJlbGF5VHlwZUl0ZW1zLAogICAgICBkZXNjcmlwdGlvbjogdm0uJHQoIlJlbGF5VHlwZURlc2MiKQogICAgfSwgewogICAgICB0aXRsZTogdm0uJHQoIlJlbW90ZUNvbnRyb2wiKSwKICAgICAgdHlwZTogInNlbGVjdCIsCiAgICAgIGtleTogIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5SZW1vdGVDb250cm9sMiIsCiAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5SZW1vdGVDb250cm9sMiJdLAogICAgICBzZWxlY3RJdGVtczogdm0uc3RhdHVzSXRlbXMsCiAgICAgIGRlc2NyaXB0aW9uOiB2bS4kdCgiUmVtb3RlQ29udHJvbERlc2MiKQogICAgfSwgewogICAgICB0aXRsZTogdm0uJHQoIkRUTUYiKSwKICAgICAgdHlwZTogImlucHV0IiwKICAgICAga2V5OiAiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkxvY2FsRFRNRjIiLAogICAgICB2YWx1ZTogdm0uYXBpRGF0YS5jb25maWdEYXRhWyJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuTG9jYWxEVE1GMiJdLAogICAgICBkZXNjcmlwdGlvbjogdm0uJHQoIlJlbGF5RFRNRkRlc2MiKQogICAgfSwgewogICAgICB0aXRsZTogdm0uJHQoIlJlbW90ZVJlbGF5IiksCiAgICAgIHR5cGU6ICJsYWJlbCIsCiAgICAgIGtleTogInJlbW90ZVJlbGF5IiwKICAgICAgdmFsdWU6ICIiLAogICAgICB0aXRsZUJvbGQ6IHRydWUKICAgIH0sIHsKICAgICAgdGl0bGU6IHZtLiR0KCJEVE1GIikgKyAiMSAiICsgdm0uJHQoIkNvZGUiKSwKICAgICAgdHlwZTogImlucHV0IiwKICAgICAga2V5OiAiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkRUTUZDb2RlIiwKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkRUTUZDb2RlIl0sCiAgICAgIGRlc2NyaXB0aW9uOiB2bS4kdCgiRFRNRkNvZGVEZXNjIikKICAgIH0sIHsKICAgICAgdGl0bGU6IHZtLiR0KCJEVE1GIikgKyAiMiAiICsgdm0uJHQoIkNvZGUiKSwKICAgICAgdHlwZTogImlucHV0IiwKICAgICAga2V5OiAiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkRUTUZDb2RlMiIsCiAgICAgIHZhbHVlOiB2bS5hcGlEYXRhLmNvbmZpZ0RhdGFbIkNvbmZpZy5Eb29yU2V0dGluZy5SRUxBWS5EVE1GQ29kZTIiXSwKICAgICAgaXNIaWRlOiBmYWxzZSwKICAgICAgZGVzY3JpcHRpb246IHZtLiR0KCJEVE1GQ29kZURlc2MiKQogICAgfSwgewogICAgICB0aXRsZTogdm0uJHQoIkRUTUYiKSArICIzICIgKyB2bS4kdCgiQ29kZSIpLAogICAgICB0eXBlOiAiaW5wdXQiLAogICAgICBrZXk6ICJDb25maWcuRG9vclNldHRpbmcuUkVMQVkuRFRNRkNvZGUzIiwKICAgICAgdmFsdWU6IHZtLmFwaURhdGEuY29uZmlnRGF0YVsiQ29uZmlnLkRvb3JTZXR0aW5nLlJFTEFZLkRUTUZDb2RlMyJdLAogICAgICBpc0hpZGU6IGZhbHNlLAogICAgICBkZXNjcmlwdGlvbjogdm0uJHQoIkRUTUZDb2RlRGVzYyIpCiAgICB9XQogIH07CiAgcmV0dXJuIGNvbnRlbnQ7Cn0="},null]}