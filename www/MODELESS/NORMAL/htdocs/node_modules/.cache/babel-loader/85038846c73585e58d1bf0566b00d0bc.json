{"remainingRequest":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/thread-loader/dist/cjs.js!/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/babel-loader/lib/index.js!/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/cache-loader/dist/cjs.js??ref--0-0!/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/vue-loader/lib/index.js??vue-loader-options!/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/src/views/ContactsLocalContacts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/src/views/ContactsLocalContacts.vue","mtime":1600155105014},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/cache-loader/dist/cjs.js","mtime":1600155105894},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/thread-loader/dist/cjs.js","mtime":1600155105122},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/babel-loader/lib/index.js","mtime":1600155105338},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/cache-loader/dist/cjs.js","mtime":1600155105894},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/vue-loader/lib/index.js","mtime":1600155105414}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7Ci8vCi8vCi8vCi8vCmltcG9ydCBDb21tb25QYWdlIGZyb20gIkAvY29tcG9uZW50cy9Db21tb25QYWdlLnZ1ZSI7CmltcG9ydCB7IHNob3dSZXF1ZXN0U3VjY2VzcywgZGVlcENsb25lLCBnZXRJdGVtQnlLZXksIGdldEluZGV4QnlLZXksIGlzQVZhbGlkRGlhbGVkTnVtYmVyIH0gZnJvbSAiQC9qcy9jb21tb24uanMiOwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgQ29tbW9uUGFnZTogQ29tbW9uUGFnZQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNlYXJjaFZhbHVlOiAiIiwKICAgICAgY2hhbmdlZENmZ0RhdGE6IHt9LAogICAgICBzdWJtaXRDZmdEYXRhOiB7fSwKICAgICAgYXBpRGF0YToge30sCiAgICAgIGRhdGE6IHsKICAgICAgICBnZXREYXRhU3VjY2VzczogZmFsc2UKICAgICAgfSwKICAgICAgY3VycmVudENvbnRhY3RMaXN0OiBbXQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICBnZXREYXRhKHRoaXMpOwogIH0sCiAgbWV0aG9kczogewogICAgb25Db21tb25QYWdlRGF0YUNoYW5nZTogZnVuY3Rpb24gb25Db21tb25QYWdlRGF0YUNoYW5nZShldmVudCkgewogICAgICBzZXRDaGFuZ2VkRGF0YSh0aGlzLCBldmVudCk7CiAgICB9CiAgfQp9OwoKZnVuY3Rpb24gc2V0Q2hhbmdlZERhdGEodm0sIGV2ZW50KSB7CiAgaWYgKGV2ZW50LmNvbnRlbnRLZXkgPT0gImNvbnRhY3RzTGlzdCIgJiYgZXZlbnQuaXRlbUtleSA9PSAiY29udGFjdExpc3RTZWxlY3QiKSB7CiAgICBnZXRDb250YWN0c1RhYmxlRGF0YSh2bSwgMSk7CiAgfQp9CgpmdW5jdGlvbiBzdWJtaXREYXRhKHZtKSB7CiAgdm0uZGF0YS5zdWJtaXRMb2FkaW5nID0gdHJ1ZTsKICB2YXIgcmVxdWVzdERhdGEgPSB7CiAgICB0YXJnZXQ6ICJwaG9uZUxvY2FsQ29udGFjdCIsCiAgICBhY3Rpb246ICJzZXQiLAogICAgY29uZmlnRGF0YTogdm0uc3VibWl0Q2ZnRGF0YQogIH07CiAgdm0uJGF4aW9zLnBvc3QoImFwaSIsIHJlcXVlc3REYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgc2hvd1JlcXVlc3RTdWNjZXNzKHZtKTsKICAgIHZtLmRhdGEuc3VibWl0TG9hZGluZyA9IGZhbHNlOwogIH0pOwp9CgpmdW5jdGlvbiBnZXREYXRhKHZtKSB7CiAgdm0uJGF4aW9zLmdldCgiYXBpL3Bob25lTG9jYWxDb250YWN0L2luZm8iKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgdm0uZ2V0RGF0YVN1Y2Nlc3MgPSB0cnVlOwogICAgdm0uYXBpRGF0YSA9IHJlc3BvbnNlLmRhdGE7CiAgICB2bS5jaGFuZ2VkQ2ZnRGF0YSA9IGRlZXBDbG9uZShyZXNwb25zZS5kYXRhLmNvbmZpZ0RhdGEpOwogICAgY3JlYXRlUGFnZURhdGEodm0pOwogIH0pOwp9CgpmdW5jdGlvbiBnZXRDb21taXREYXRhKHZtKSB7CiAgdm0uc3VibWl0Q2ZnRGF0YSA9IHt9OwoKICBmb3IgKHZhciBjaGFuZ2VkS2V5IGluIHZtLmNoYW5nZWRDZmdEYXRhKSB7CiAgICBpZiAodm0uYXBpRGF0YS5jb25maWdEYXRhW2NoYW5nZWRLZXldICE9IHZtLmNoYW5nZWRDZmdEYXRhW2NoYW5nZWRLZXldKSB7CiAgICAgIHZtLnN1Ym1pdENmZ0RhdGFbY2hhbmdlZEtleV0gPSB2bS5jaGFuZ2VkQ2ZnRGF0YVtjaGFuZ2VkS2V5XTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGNyZWF0ZVBhZ2VEYXRhKHZtKSB7CiAgdm0uZGF0YSA9IHsKICAgIGdldERhdGFTdWNjZXNzOiB0cnVlLAogICAgYnJlYWRDcnVtYjogewogICAgICBmaXJzdFRpdGxlOiB2bS4kdCgiQ29udGFjdHMiKSwKICAgICAgc2Vjb25kVGl0bGU6IHZtLiR0KCJMb2NhbENvbnRhY3RzIikKICAgIH0sCiAgICBvblN1Ym1pdDogZnVuY3Rpb24gb25TdWJtaXQoKSB7CiAgICAgIGdldENvbW1pdERhdGEodm0pOwogICAgICBzdWJtaXREYXRhKHZtKTsKICAgIH0sCiAgICBvbkNhbmNlbDogZnVuY3Rpb24gb25DYW5jZWwoKSB7CiAgICAgIHZtLmRhdGEuY2FuY2VsTG9hZGluZyA9IHRydWU7CiAgICAgIGdldERhdGEodm0pOwogICAgfSwKICAgIHN1Ym1pdExvYWRpbmc6IGZhbHNlLAogICAgY2FuY2VsTG9hZGluZzogZmFsc2UsCiAgICBjb250ZW50czogW10KICB9OwogIHZtLmRhdGEuY29udGVudHMucHVzaChjcmVhdGVDb250YWN0TGlzdENvbnRlbnQodm0pKTsKICB2bS5kYXRhLmNvbnRlbnRzLnB1c2goY3JlYXRlRGlhbE51bWJlckNvbnRlbnQodm0pKTsKICBnZXRDb250YWN0c1RhYmxlRGF0YSh2bSwgMSk7Cn0KCmZ1bmN0aW9uIGNyZWF0ZURpYWxOdW1iZXJDb250ZW50KHZtKSB7CiAgdmFyIGFjY291bnRJdGVtcyA9IFt7CiAgICBrZXk6IDAsCiAgICBsYWJlbDogdm0uJHQoIkF1dG8iKQogIH1dOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLmFwaURhdGEuZGF0YS5hY2NvdW50TGlzdC5sZW5ndGg7IGkrKykgewogICAgdmFyIGl0ZW0gPSB7CiAgICAgIGtleTogdm0uYXBpRGF0YS5kYXRhLmFjY291bnRMaXN0W2ldLmluZGV4LAogICAgICBsYWJlbDogdm0uJHQoIkxpbmUiKSArIHZtLmFwaURhdGEuZGF0YS5hY2NvdW50TGlzdFtpXS5pbmRleCArICI6ICIgKyB2bS5hcGlEYXRhLmRhdGEuYWNjb3VudExpc3RbaV0ubmFtZQogICAgfTsKICAgIGFjY291bnRJdGVtcy5wdXNoKGl0ZW0pOwogIH0KCiAgdmFyIGNvbnRlbnQgPSB7CiAgICBrZXk6ICJkaWFsTnVtYmVyIiwKICAgIHRpdGxlOiB2bS4kdCgiRGlhbE51bWJlciIpLAogICAgdGl0bGVEZXNjcmlwdGlvbjogdm0uJHQoIkRpYWxOdW1iZXIiKSwKICAgIGl0ZW1zOiBbewogICAgICB0eXBlOiAiZGlhbElucHV0IiwKICAgICAga2V5OiAiZGlhbElucHV0IiwKICAgICAgLy8gc2VsZWN0VmFsdWU6IDAsCiAgICAgIHNlbGVjdEl0ZW1zOiBhY2NvdW50SXRlbXMKICAgIH1dCiAgfTsKICByZXR1cm4gY29udGVudDsKfQoKZnVuY3Rpb24gY3JlYXRlQ29udGFjdExpc3RDb250ZW50KHZtKSB7CiAgLy/mt7vliqDmoYYKICB2YXIgYWRkTW9kYWxEYXRhID0gewogICAgdGl0bGU6IHZtLiR0KCJBZGRDb250YWN0IikgKyAiID4+IiwKICAgIGtleTogLTEsCiAgICBjYW5jZWxCdG5MYWJlbDogdm0uJHQoIkNhbmNlbCIpLAogICAgc3VibWl0QnRuTGFiZWw6IHZtLiR0KCJTdWJtaXQiKSwKICAgIHZpc2libGU6IGZhbHNlLAogICAgc2hvd0Zvb3RlcjogdHJ1ZSwKICAgIGl0ZW1zOiBbewogICAgICB0aXRsZTogdm0uJHQoIk5hbWUiKSwKICAgICAgdHlwZTogImlucHV0IiwKICAgICAga2V5OiAibmFtZSIsCiAgICAgIHZhbHVlOiAiIiwKICAgICAgaXNXYXJuOiBmYWxzZSwKICAgICAgd2FybkxhYmVsOiB2bS4kdCgiTmFtZUVtcHR5V2FybmluZyIpCiAgICB9LCB7CiAgICAgIHRpdGxlOiB2bS4kdCgiTnVtYmVyIiksCiAgICAgIHR5cGU6ICJpbnB1dCIsCiAgICAgIGtleTogIm51bWJlciIsCiAgICAgIHZhbHVlOiAiIiwKICAgICAgaXNXYXJuOiBmYWxzZSwKICAgICAgd2FybkxhYmVsOiB2bS4kdCgiUGxlYXNlQ2hlY2tTdWJtaXREYXRhIikKICAgIH0sIHsKICAgICAgdGl0bGU6IHZtLiR0KCJHcm91cCIpLAogICAgICB0eXBlOiAic2VsZWN0IiwKICAgICAga2V5OiAiZ3JvdXAiLAogICAgICB2YWx1ZTogIiIsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgc2VsZWN0SXRlbXM6IFt7CiAgICAgICAga2V5OiAwLAogICAgICAgIGxhYmVsOiB2bS4kdCgiRGVmYXVsdCIpCiAgICAgIH0sIHsKICAgICAgICBrZXk6IDEsCiAgICAgICAgbGFiZWw6IHZtLiR0KCJCbGFja0xpc3QiKQogICAgICB9XQogICAgfSwgewogICAgICB0aXRsZTogdm0uJHQoIkRpYWxBY2NvdW50IiksCiAgICAgIHR5cGU6ICJzZWxlY3QiLAogICAgICBrZXk6ICJhY2NvdW50IiwKICAgICAgdmFsdWU6ICIiLAogICAgICBkZWZhdWx0VmFsdWU6IDAsCiAgICAgIHNlbGVjdEl0ZW1zOiBbewogICAgICAgIGtleTogMCwKICAgICAgICBsYWJlbDogdm0uJHQoIkFjY291bnQiKSArIDEKICAgICAgfSwgewogICAgICAgIGtleTogMSwKICAgICAgICBsYWJlbDogdm0uJHQoIkFjY291bnQiKSArIDIKICAgICAgfV0KICAgIH1dLAogICAgb25Db25maXJtOiBmdW5jdGlvbiBvbkNvbmZpcm0oKSB7CiAgICAgIG9uQ2hhbmdlQ29udGFjdCh2bSk7CiAgICB9CiAgfTsgLy/lr7zlhaXmoYYKCiAgdmFyIGltcG9ydE1vZGFsRGF0YSA9IHsKICAgIHRpdGxlOiAiICIsCiAgICBjYW5jZWxCdG5MYWJlbDogdm0uJHQoIkNhbmNlbCIpLAogICAgc3VibWl0QnRuTGFiZWw6IHZtLiR0KCJJbXBvcnQiKSwKICAgIHNob3dGb290ZXI6IHRydWUsCiAgICB2aXNpYmxlOiBmYWxzZSwKICAgIGl0ZW1zOiBbewogICAgICB0aXRsZTogdm0uJHQoIkZpbGVMYWJlbCIpICsgIiAoLlhtbC8uQ3N2KSIsCiAgICAgIHR5cGU6ICJmaWxlLWlucHV0IiwKICAgICAga2V5OiAiaW1wb3J0IiwKICAgICAgYWNjZXB0RmlsZVR5cGU6ICIueG1sLC5jc3YiLAogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgdmFsdWU6IHsKICAgICAgICBmaWxlRGF0YToge30sCiAgICAgICAgZmlsZU5hbWU6IHZtLiR0KCJVcGdyYWRlRmlsZVBhdGgiKQogICAgICB9LAogICAgICBpbXBvcnRCdG5OYW1lOiB2bS4kdCgiUmVzZXQiKQogICAgfV0sCiAgICBvbkNvbmZpcm06IGZ1bmN0aW9uIG9uQ29uZmlybSgpIHsKICAgICAgb25JbXBvcnQodm0pOwogICAgfSwKICAgIGNvbmZpcm1Mb2FkaW5nOiBmYWxzZQogIH07IC8vdGFibGUgaGVhZAoKICB2YXIgdGFibGVIZWFkRGF0YSA9IHsKICAgIGFkZE1vZGFsRGF0YTogYWRkTW9kYWxEYXRhLAogICAgaW1wb3J0TW9kYWxEYXRhOiBpbXBvcnRNb2RhbERhdGEsCiAgICBleHBvcnRJdGVtczogW3sKICAgICAga2V5OiAieG1sIiwKICAgICAgbGFiZWw6ICJ4bWwiCiAgICB9LCB7CiAgICAgIGtleTogImNzdiIsCiAgICAgIGxhYmVsOiAiY3N2IgogICAgfV0sCiAgICBvbkV4cG9ydDogZnVuY3Rpb24gb25FeHBvcnQodHlwZSkgewogICAgICBfb25FeHBvcnQodm0sIHR5cGUpOwogICAgfQogIH07IC8vdGFibGUgZm9vdGVyCgogIHZhciB0YWJsZUZvb3RlckRhdGEgPSB7CiAgICBvbkRlbGV0ZTogZnVuY3Rpb24gb25EZWxldGUoKSB7CiAgICAgIG9uRGVsZXRlQ29udGFjdCh2bSwgInNlbGVjdCIpOwogICAgfSwKICAgIG9uRGVsZXRlQWxsOiBmdW5jdGlvbiBvbkRlbGV0ZUFsbCgpIHsKICAgICAgb25EZWxldGVDb250YWN0KHZtLCAiYWxsIik7CiAgICB9LAogICAgb25QYWdlQ2hhbmdlOiBmdW5jdGlvbiBvblBhZ2VDaGFuZ2UocGFnZSkgewogICAgICBnZXRDb250YWN0c1RhYmxlRGF0YSh2bSwgcGFnZSk7CiAgICB9LAogICAgc3VtOiAwLAogICAgcGFnZU51bWJlcjogNSwKICAgIGN1clBhZ2U6IDAsCiAgICBkZWxldGVEaXNhYmxlZDogdHJ1ZSwKICAgIGRlbGV0ZUFsbERpc2FibGVkOiBmYWxzZQogIH07IC8vY29udGVudAoKICB2YXIgY29udGVudCA9IHsKICAgIGtleTogImNvbnRhY3RzTGlzdCIsCiAgICB0aXRsZTogdm0uJHQoIkNvbnRhY3RzTGlzdFNldHRpbmciKSwKICAgIHRpdGxlRGVzY3JpcHRpb246IHZtLiR0KCJDb250YWN0c0xpc3RTZXR0aW5nIiksCiAgICBpdGVtczogW3sKICAgICAgdGl0bGU6IHZtLiR0KCJDb250YWN0c0xpc3QiKSwKICAgICAgdHlwZTogInNlbGVjdCIsCiAgICAgIGtleTogImNvbnRhY3RMaXN0U2VsZWN0IiwKICAgICAgdmFsdWU6ICJBbGxDb250YWN0cyIsCiAgICAgIHNlbGVjdEl0ZW1zOiBbewogICAgICAgIGtleTogIkFsbENvbnRhY3RzIiwKICAgICAgICBsYWJlbDogdm0uJHQoIkFsbENvbnRhY3RzIikKICAgICAgfSwgewogICAgICAgIGtleTogIkJsYWNrTGlzdCIsCiAgICAgICAgbGFiZWw6IHZtLiR0KCJCbGFja0xpc3QiKQogICAgICB9XQogICAgfSwgewogICAgICB0aXRsZTogdm0uJHQoIlNlYXJjaCIpLAogICAgICB0eXBlOiAiaW5wdXQiLAogICAgICBrZXk6ICJzZWFyY2giLAogICAgICB2YWx1ZTogIiIsCiAgICAgIHNob3dCdG46IHRydWUsCiAgICAgIGlzV2FybjogZmFsc2UsCiAgICAgIHdhcm5MYWJlbDogdm0uJHQoIkNvblNlYXJjaFByb21wdCIpLAogICAgICBvblNlYXJjaDogZnVuY3Rpb24gb25TZWFyY2godmFsdWUpIHsKICAgICAgICBvbkNvbnRhY3RTZWFyY2godm0sIHZhbHVlKTsKICAgICAgfSwKICAgICAgb25SZXNldDogZnVuY3Rpb24gb25SZXNldCgpIHsKICAgICAgICBvbkNvbnRhY3RTZWFyY2hSZXNldCh2bSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAgdHlwZTogInRhYmxlIiwKICAgICAga2V5OiAiY29udGFjdExpc3RUYWJsZSIsCiAgICAgIHNob3dIZWFkOiB0cnVlLAogICAgICBzaG93Rm9vdGVyOiB0cnVlLAogICAgICBzaG93Um93U2VsZWN0aW9uOiB0cnVlLAogICAgICBzZWxlY3RlZFJvd0tleXM6IFtdLAogICAgICB0YWJsZUhlYWREYXRhOiB0YWJsZUhlYWREYXRhLAogICAgICB0YWJsZUZvb3RlckRhdGE6IHRhYmxlRm9vdGVyRGF0YSwKICAgICAgdGFibGVEYXRhOiBbXSwKICAgICAgdGFibGVDb2x1bW5zOiBbewogICAgICAgIHR5cGU6ICJsYWJlbCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJJbmRleCIpLAogICAgICAgIGRhdGFJbmRleDogImluZGV4IiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAiaW5kZXgiCiAgICAgICAgfSwKICAgICAgICBhbGlnbjogImNlbnRlciIsCiAgICAgICAgd2lkdGg6ICIxMCUiCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAibGFiZWwiLAogICAgICAgIHRpdGxlOiB2bS4kdCgiTmFtZSIpLAogICAgICAgIGRhdGFJbmRleDogIm5hbWUiLAogICAgICAgIHNjb3BlZFNsb3RzOiB7CiAgICAgICAgICBjdXN0b21SZW5kZXI6ICJuYW1lIgogICAgICAgIH0sCiAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgIHdpZHRoOiAiMjAlIgogICAgICB9LCB7CiAgICAgICAgdHlwZTogImxhYmVsIiwKICAgICAgICB0aXRsZTogdm0uJHQoIk51bWJlciIpLAogICAgICAgIGRhdGFJbmRleDogIm51bWJlciIsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsKICAgICAgICAgIGN1c3RvbVJlbmRlcjogIm51bWJlciIKICAgICAgICB9LAogICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICB3aWR0aDogIjIwJSIKICAgICAgfSwgewogICAgICAgIHR5cGU6ICJsYWJlbCIsCiAgICAgICAgdGl0bGU6IHZtLiR0KCJHcm91cCIpLAogICAgICAgIGRhdGFJbmRleDogImdyb3VwIiwKICAgICAgICBzY29wZWRTbG90czogewogICAgICAgICAgY3VzdG9tUmVuZGVyOiAiZ3JvdXAiCiAgICAgICAgfSwKICAgICAgICBhbGlnbjogImNlbnRlciIsCiAgICAgICAgd2lkdGg6ICIyMCUiCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAibGFiZWwiLAogICAgICAgIHRpdGxlOiB2bS4kdCgiQWNjb3VudCIpLAogICAgICAgIGRhdGFJbmRleDogImFjY291bnQiLAogICAgICAgIHNjb3BlZFNsb3RzOiB7CiAgICAgICAgICBjdXN0b21SZW5kZXI6ICJhY2NvdW50IgogICAgICAgIH0sCiAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgIHdpZHRoOiAiMjAlIgogICAgICB9LCB7CiAgICAgICAgdHlwZTogImVkaXQiLAogICAgICAgIHRpdGxlOiB2bS4kdCgiRWRpdExhYmVsIiksCiAgICAgICAgZGF0YUluZGV4OiAiZWRpdCIsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsKICAgICAgICAgIGN1c3RvbVJlbmRlcjogImVkaXQiCiAgICAgICAgfSwKICAgICAgICBhbGlnbjogImNlbnRlciIsCiAgICAgICAgd2lkdGg6ICIxMCUiLAogICAgICAgIG9uRWRpdDogZnVuY3Rpb24gb25FZGl0KGluZGV4LCBrZXkpIHsKICAgICAgICAgIG9uU2V0RWRpdFZhbHVlKGluZGV4LCBrZXksIHZtKTsKICAgICAgICB9CiAgICAgIH1dCiAgICB9XQogIH07CiAgcmV0dXJuIGNvbnRlbnQ7Cn0KCmZ1bmN0aW9uIGdldENvbnRhY3RzVGFibGVEYXRhKHZtLCBwYWdlKSB7CiAgdmFyIGdyb3VwID0gZ2V0SXRlbUJ5S2V5KHZtLmRhdGEsICJjb250YWN0c0xpc3QiLCAiY29udGFjdExpc3RTZWxlY3QiKS52YWx1ZTsKICB2bS4kYXhpb3MuZ2V0KCJhcGkvcGhvbmVMb2NhbENvbnRhY3QvZ2V0P3BhZ2U9IiArIHBhZ2UgKyAiJmdyb3VwPSIgKyBncm91cCArICImc2VhcmNoPSIgKyB2bS5zZWFyY2hWYWx1ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgIHZhciB0YWJsZURhdGEgPSBbXTsKICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YS5kYXRhOwogICAgdm0uY3VycmVudENvbnRhY3RMaXN0ID0gcmVzcG9uc2UuZGF0YS5kYXRhLmNvbnRhY3RMaXN0OwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5jb250YWN0TGlzdC5sZW5ndGg7IGkrKykgewogICAgICB2YXIgaXRlbSA9IHsKICAgICAgICBrZXk6IGRhdGEuY29udGFjdExpc3RbaV0uaWQsCiAgICAgICAgaW5kZXg6IGkgKyAxLAogICAgICAgIG5hbWU6IGRhdGEuY29udGFjdExpc3RbaV0ubmFtZSwKICAgICAgICBudW1iZXI6IGRhdGEuY29udGFjdExpc3RbaV0ubnVtYmVyLAogICAgICAgIGdyb3VwOiBkYXRhLmNvbnRhY3RMaXN0W2ldLmdyb3VwID09ICIiID8gdm0uJHQoIkRlZmF1bHQiKSA6IGRhdGEuY29udGFjdExpc3RbaV0uZ3JvdXAgPT0gIkJsb2NrTGlzdCIgPyB2bS4kdCgiQmxhY2tMaXN0IikgOiBkYXRhLmNvbnRhY3RMaXN0W2ldLmdyb3VwLAogICAgICAgIGFjY291bnQ6IHZtLiR0KCJBY2NvdW50IikgKyAoZGF0YS5jb250YWN0TGlzdFtpXS5hY2NvdW50ICsgMSksCiAgICAgICAgZWRpdDogaQogICAgICB9OwogICAgICB0YWJsZURhdGEucHVzaChpdGVtKTsKICAgIH0KCiAgICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgImNvbnRhY3RzTGlzdCIsICJjb250YWN0TGlzdFRhYmxlIikudGFibGVEYXRhID0gdGFibGVEYXRhOwogICAgZ2V0SXRlbUJ5S2V5KHZtLmRhdGEsICJjb250YWN0c0xpc3QiLCAiY29udGFjdExpc3RUYWJsZSIpLnRhYmxlRm9vdGVyRGF0YS5zdW0gPSBkYXRhLnN1bTsKICAgIGdldEl0ZW1CeUtleSh2bS5kYXRhLCAiY29udGFjdHNMaXN0IiwgImNvbnRhY3RMaXN0VGFibGUiKS50YWJsZUZvb3RlckRhdGEucGFnZU51bWJlciA9IGRhdGEucGFnZU51bTsKICAgIGdldEl0ZW1CeUtleSh2bS5kYXRhLCAiY29udGFjdHNMaXN0IiwgImNvbnRhY3RMaXN0VGFibGUiKS50YWJsZUZvb3RlckRhdGEuY3VyUGFnZSA9IHBhZ2U7CiAgICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgImNvbnRhY3RzTGlzdCIsICJjb250YWN0TGlzdFRhYmxlIikuc2VsZWN0ZWRSb3dLZXlzID0gW107CiAgfSk7Cn0KCmZ1bmN0aW9uIG9uQ2hhbmdlQ29udGFjdCh2bSkgewogIHZhciBhZGRNb2RhbERhdGEgPSBnZXRJdGVtQnlLZXkodm0uZGF0YSwgImNvbnRhY3RzTGlzdCIsICJjb250YWN0TGlzdFRhYmxlIikudGFibGVIZWFkRGF0YS5hZGRNb2RhbERhdGE7CiAgdmFyIG5hbWUgPSBhZGRNb2RhbERhdGEuaXRlbXNbZ2V0SW5kZXhCeUtleShhZGRNb2RhbERhdGEuaXRlbXMsICJuYW1lIildOwogIHZhciBudW1iZXIgPSBhZGRNb2RhbERhdGEuaXRlbXNbZ2V0SW5kZXhCeUtleShhZGRNb2RhbERhdGEuaXRlbXMsICJudW1iZXIiKV07CiAgdmFyIGdyb3VwID0gYWRkTW9kYWxEYXRhLml0ZW1zW2dldEluZGV4QnlLZXkoYWRkTW9kYWxEYXRhLml0ZW1zLCAiZ3JvdXAiKV07CiAgdmFyIGFjY291bnQgPSBhZGRNb2RhbERhdGEuaXRlbXNbZ2V0SW5kZXhCeUtleShhZGRNb2RhbERhdGEuaXRlbXMsICJhY2NvdW50IildOwogIHZhciBpZCA9IGFkZE1vZGFsRGF0YS5rZXk7CiAgdmFyIGVyckZsYWcgPSBmYWxzZTsKCiAgaWYgKG5hbWUudmFsdWUgPT0gIiIpIHsKICAgIG5hbWUuaXNXYXJuID0gdHJ1ZTsKICAgIG5hbWUud2FybkxhYmVsID0gdm0uJHQoIk5hbWVFbXB0eVdhcm5pbmciKTsKICAgIGVyckZsYWcgPSB0cnVlOwogIH0KCiAgaWYgKCFpc0FWYWxpZERpYWxlZE51bWJlcihudW1iZXIudmFsdWUpKSB7CiAgICBudW1iZXIuaXNXYXJuID0gdHJ1ZTsKICAgIGVyckZsYWcgPSB0cnVlOwogIH0KCiAgaWYgKGVyckZsYWcpIHsKICAgIHJldHVybjsKICB9CgogIHZhciBvcmlHcm91cCA9IDA7CgogIGlmIChpZCA+PSAwKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLmN1cnJlbnRDb250YWN0TGlzdC5sZW5ndGg7IGkrKykgewogICAgICBpZiAodm0uY3VycmVudENvbnRhY3RMaXN0W2ldLmlkID09IGlkKSB7CiAgICAgICAgb3JpR3JvdXAgPSB2bS5jdXJyZW50Q29udGFjdExpc3RbaV0uZ3JvdXAgPT0gIkJsb2NrTGlzdCIgPyAxIDogMDsKICAgICAgfQogICAgfQogIH0KCiAgdmFyIGRhdGEgPSB7CiAgICBuYW1lOiBuYW1lLnZhbHVlLAogICAgbnVtYmVyOiBudW1iZXIudmFsdWUsCiAgICBncm91cDogZ3JvdXAudmFsdWUsCiAgICBvcmlHcm91cDogb3JpR3JvdXAsCiAgICBhY2NvdW50OiBhY2NvdW50LnZhbHVlLAogICAgaWQ6IGlkCiAgfTsKICB2YXIgYWN0aW9uID0gaWQgPj0gMCA/ICJlZGl0IiA6ICJhZGQiOwogIHZhciByZXF1ZXN0RGF0YSA9IHsKICAgIHRhcmdldDogInBob25lTG9jYWxDb250YWN0IiwKICAgIGFjdGlvbjogYWN0aW9uLAogICAgZGF0YTogZGF0YQogIH07CiAgdm0uJGF4aW9zLnBvc3QoImFwaSIsIHJlcXVlc3REYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgdmFyIHJldCA9IHJlc3BvbnNlLmRhdGEucmV0Y29kZTsKCiAgICBpZiAocmV0ID09IDApIHsKICAgICAgbmFtZS52YWx1ZSA9ICIiOwogICAgICBudW1iZXIudmFsdWUgPSAiIjsKICAgICAgZ3JvdXAudmFsdWUgPSAwOwogICAgICBhY2NvdW50LnZhbHVlID0gMDsKICAgICAgdmFyIHBhZ2UgPSAwOwogICAgICB2YXIgdGFibGVJdGVtID0gZ2V0SXRlbUJ5S2V5KHZtLmRhdGEsICJjb250YWN0c0xpc3QiLCAiY29udGFjdExpc3RUYWJsZSIpOwoKICAgICAgaWYgKGFjdGlvbiA9PSAiYWRkIikgewogICAgICAgIC8v6aG16Z2i5pWw5o2u5Y+Y5YyWCiAgICAgICAgcGFnZSA9IE1hdGguY2VpbCgodGFibGVJdGVtLnRhYmxlRm9vdGVyRGF0YS5zdW0gKyAxKSAvIHRhYmxlSXRlbS50YWJsZUZvb3RlckRhdGEucGFnZU51bWJlcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcGFnZSA9IHRhYmxlSXRlbS50YWJsZUZvb3RlckRhdGEuY3VyUGFnZTsKICAgICAgfQoKICAgICAgZ2V0Q29udGFjdHNUYWJsZURhdGEodm0sIHBhZ2UpOyAvL+WFs+mXreeql+WPo+W5tuWxleekuuaIkOWKnwoKICAgICAgYWRkTW9kYWxEYXRhLnZpc2libGUgPSBmYWxzZTsKICAgICAgc2hvd1JlcXVlc3RTdWNjZXNzKHZtKTsKICAgIH0gZWxzZSBpZiAocmV0ID09IDcpIHsKICAgICAgbmFtZS5pc1dhcm4gPSB0cnVlOwogICAgICBuYW1lLndhcm5MYWJlbCA9IHZtLiR0KCJTYW1lTmFtZVdhcm5pbmciKTsKICAgIH0gZWxzZSBpZiAocmV0ID09IDE3KSB7CiAgICAgIHNob3dFcnJvckluZm8odm0sIHZtLiR0KCJUb29NYW55Q29udGFjdHNXYXJuaW5nIikpOwogICAgfSBlbHNlIGlmIChyZXQgPT0gMTgpIHsKICAgICAgc2hvd0Vycm9ySW5mbyh2bSwgdm0uJHQoIlRvb01hbnlCTFdhcm5pbmciKSk7CiAgICB9CiAgfSk7Cn0KCmZ1bmN0aW9uIG9uU2V0RWRpdFZhbHVlKGluZGV4LCBrZXksIHZtKSB7CiAgdmFyIHRhYmxlSXRlbSA9IGdldEl0ZW1CeUtleSh2bS5kYXRhLCAiY29udGFjdHNMaXN0IiwgImNvbnRhY3RMaXN0VGFibGUiKTsKICB0YWJsZUl0ZW0udGFibGVIZWFkRGF0YS5hZGRNb2RhbERhdGEuaXRlbXNbZ2V0SW5kZXhCeUtleSh0YWJsZUl0ZW0udGFibGVIZWFkRGF0YS5hZGRNb2RhbERhdGEuaXRlbXMsICJudW1iZXIiKV0udmFsdWUgPSB0YWJsZUl0ZW0udGFibGVEYXRhW2luZGV4XS5udW1iZXI7CiAgdGFibGVJdGVtLnRhYmxlSGVhZERhdGEuYWRkTW9kYWxEYXRhLml0ZW1zW2dldEluZGV4QnlLZXkodGFibGVJdGVtLnRhYmxlSGVhZERhdGEuYWRkTW9kYWxEYXRhLml0ZW1zLCAibmFtZSIpXS52YWx1ZSA9IHRhYmxlSXRlbS50YWJsZURhdGFbaW5kZXhdLm5hbWU7CiAgdGFibGVJdGVtLnRhYmxlSGVhZERhdGEuYWRkTW9kYWxEYXRhLml0ZW1zW2dldEluZGV4QnlLZXkodGFibGVJdGVtLnRhYmxlSGVhZERhdGEuYWRkTW9kYWxEYXRhLml0ZW1zLCAiYWNjb3VudCIpXS52YWx1ZSA9IHRhYmxlSXRlbS50YWJsZURhdGFbaW5kZXhdLmFjY291bnQ7CiAgdGFibGVJdGVtLnRhYmxlSGVhZERhdGEuYWRkTW9kYWxEYXRhLml0ZW1zW2dldEluZGV4QnlLZXkodGFibGVJdGVtLnRhYmxlSGVhZERhdGEuYWRkTW9kYWxEYXRhLml0ZW1zLCAiZ3JvdXAiKV0udmFsdWUgPSB0YWJsZUl0ZW0udGFibGVEYXRhW2luZGV4XS5ncm91cDsKfQoKZnVuY3Rpb24gb25EZWxldGVDb250YWN0KHZtLCB0eXBlKSB7CiAgaWYgKCFjb25maXJtKHR5cGUgPT0gImFsbCIgPyB2bS4kdCgiRGVsZXRlQWxsQ29uZmlybSIpIDogdm0uJHQoIkRlbGV0ZVNlbGVjdGVkQ29uZmlybSIpKSkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIHNlbGVjdGVkUm93S2V5cyA9IGdldEl0ZW1CeUtleSh2bS5kYXRhLCAiY29udGFjdHNMaXN0IiwgImNvbnRhY3RMaXN0VGFibGUiKS5zZWxlY3RlZFJvd0tleXM7CiAgdmFyIHJlcXVlc3REYXRhID0gewogICAgdGFyZ2V0OiAicGhvbmVMb2NhbENvbnRhY3QiLAogICAgYWN0aW9uOiAiZGVsIiwKICAgIGRhdGE6IHsKICAgICAgdHlwZTogdHlwZSwKICAgICAgaWRzOiBzZWxlY3RlZFJvd0tleXMKICAgIH0KICB9OwogIHZtLiRheGlvcy5wb3N0KCJhcGkiLCByZXF1ZXN0RGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgIHNob3dSZXF1ZXN0U3VjY2Vzcyh2bSwgdm0uJHQoIkhpbnREZWxldGVTdWNjZXNzIikpOwogICAgdmFyIHRhYmxlRm9vdGVyRGF0YSA9IGdldEl0ZW1CeUtleSh2bS5kYXRhLCAiY29udGFjdHNMaXN0IiwgImNvbnRhY3RMaXN0VGFibGUiKS50YWJsZUZvb3RlckRhdGE7CgogICAgaWYgKHR5cGUgIT0gImFsbCIpIHsKICAgICAgdmFyIHN1bVBhZ2UgPSBNYXRoLmNlaWwoKHRhYmxlRm9vdGVyRGF0YS5zdW0gLSBzZWxlY3RlZFJvd0tleXMubGVuZ3RoKSAvIHRhYmxlRm9vdGVyRGF0YS5wYWdlTnVtYmVyKTsKICAgICAgc3VtUGFnZSA9IHN1bVBhZ2UgPT0gMCA/IDEgOiBzdW1QYWdlOwogICAgICB2YXIgcGFnZSA9IHRhYmxlRm9vdGVyRGF0YS5jdXJQYWdlID49IHN1bVBhZ2UgPyBzdW1QYWdlIDogdGFibGVGb290ZXJEYXRhLmN1clBhZ2U7CiAgICAgIGdldENvbnRhY3RzVGFibGVEYXRhKHZtLCBwYWdlKTsKICAgIH0gZWxzZSB7CiAgICAgIGdldENvbnRhY3RzVGFibGVEYXRhKHZtLCAxKTsKICAgIH0KICB9KTsKfQoKZnVuY3Rpb24gX29uRXhwb3J0KHZtLCB0eXBlKSB7CiAgdmFyIHJlcXVlc3REYXRhID0gewogICAgdGFyZ2V0OiAicGhvbmVMb2NhbENvbnRhY3QiLAogICAgYWN0aW9uOiAiZXhwb3J0IiwKICAgIGRhdGE6IHsKICAgICAgdHlwZTogdHlwZQogICAgfQogIH07CiAgdm0uJGF4aW9zLnBvc3QoImFwaSIsIHJlcXVlc3REYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgc2hvd1JlcXVlc3RTdWNjZXNzKHZtLCB2bS4kdCgiRXhwb3J0U3VjY2VzcyIpKTsKICAgIHZhciBhZGRyZXNzID0gcmVzcG9uc2UuZGF0YS5kYXRhLmFkZHJlc3M7CiAgICB3aW5kb3cub3BlbihhZGRyZXNzKTsKICB9KTsKfQoKZnVuY3Rpb24gb25JbXBvcnQodm0pIHsKICB2YXIgbW9kYWwgPSBnZXRJdGVtQnlLZXkodm0uZGF0YSwgImNvbnRhY3RzTGlzdCIsICJjb250YWN0TGlzdFRhYmxlIikudGFibGVIZWFkRGF0YS5pbXBvcnRNb2RhbERhdGE7CiAgdmFyIGl0ZW0gPSBtb2RhbC5pdGVtc1tnZXRJbmRleEJ5S2V5KG1vZGFsLml0ZW1zLCAiaW1wb3J0IildOwogIHZhciBmaWxlTmFtZSA9IGl0ZW0udmFsdWUuZmlsZU5hbWU7CgogIGlmIChmaWxlTmFtZSA9PSAiIiB8fCBmaWxlTmFtZSA9PSB2bS4kdCgiVXBncmFkZUZpbGVQYXRoIikpIHsKICAgIHJldHVybjsKICB9CgogIG1vZGFsLmNvbmZpcm1Mb2FkaW5nID0gdHJ1ZTsKICB2YXIgdXBEYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgdXBEYXRhLmFwcGVuZCgiZmlsZSIsIGl0ZW0udmFsdWUuZmlsZURhdGEpOwogIGF4aW9zLnBvc3QoImFwaS9waG9uZUxvY2FsQ29udGFjdC9pbXBvcnQiLCB1cERhdGEsIHsKICAgIGhlYWRlcnM6IHsKICAgICAgIkNvbnRlbnQtVHlwZSI6ICJtdWx0aXBhcnQvZm9ybS1kYXRhIgogICAgfQogIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgaWYgKHJlcy5kYXRhLnJldGNvZGUgPT0gLTIpIHsKICAgICAgc2hvd1dhcm5pbmdJbmZvKHZtLCB2bS4kdCgiVG9vTWFueUdyb3Vwc1dhcm5pbmciKSk7CiAgICAgIGl0ZW0udmFsdWUuZmlsZU5hbWUgPSB2bS4kdCgiVXBncmFkZUZpbGVQYXRoIik7CiAgICAgIGl0ZW0udmFsdWUuZmlsZURhdGEgPSB7fTsKICAgICAgbW9kYWwudmlzaWJsZSA9IGZhbHNlOwogICAgfSBlbHNlIGlmIChyZXMuZGF0YS5yZXRjb2RlID09IDApIHsKICAgICAgc2hvd1JlcXVlc3RTdWNjZXNzKHZtLCB2bS4kdCgiQ29udGFjdEltcG9ydFN1Y2Nlc3MiKSk7CiAgICAgIGl0ZW0udmFsdWUuZmlsZU5hbWUgPSB2bS4kdCgiVXBncmFkZUZpbGVQYXRoIik7CiAgICAgIGl0ZW0udmFsdWUuZmlsZURhdGEgPSB7fTsKICAgICAgbW9kYWwudmlzaWJsZSA9IGZhbHNlOwogICAgfSBlbHNlIHsKICAgICAgc2hvd0Vycm9ySW5mbyh2bSwgdm0uJHQoIkNvbnRhY3RJbXBvcnRGYWlsIikpOwogICAgfQoKICAgIG1vZGFsLmNvbmZpcm1Mb2FkaW5nID0gZmFsc2U7CiAgICB2YXIgcGFnZSA9IGdldEl0ZW1CeUtleSh2bS5kYXRhLCAiY29udGFjdHNMaXN0IiwgImNvbnRhY3RMaXN0VGFibGUiKS50YWJsZUZvb3RlckRhdGEuY3VyUGFnZTsKICAgIGdldENvbnRhY3RzVGFibGVEYXRhKHZtLCBwYWdlKTsKICB9KTsKfQoKZnVuY3Rpb24gb25Db250YWN0U2VhcmNoKHZtLCB2YWx1ZSkgewogIGlmICh2YWx1ZSA9PSAiIikgewogICAgZ2V0SXRlbUJ5S2V5KHZtLmRhdGEsICJjb250YWN0c0xpc3QiLCAic2VhcmNoIikuaXNXYXJuID0gdHJ1ZTsKICAgIHJldHVybjsKICB9CgogIHZhciBncm91cFNlbGVjdEl0ZW0gPSBnZXRJdGVtQnlLZXkodm0uZGF0YSwgImNvbnRhY3RzTGlzdCIsICJjb250YWN0TGlzdFNlbGVjdCIpOwogIGdyb3VwU2VsZWN0SXRlbS5zZWxlY3RJdGVtcyA9IFt7CiAgICBrZXk6ICJBbGxDb250YWN0cyIsCiAgICBsYWJlbDogdm0uJHQoIkFsbENvbnRhY3RzIikKICB9XTsKICBncm91cFNlbGVjdEl0ZW0udmFsdWUgPSAiQWxsQ29udGFjdHMiOwogIHZtLnNlYXJjaFZhbHVlID0gdmFsdWU7CiAgZ2V0Q29udGFjdHNUYWJsZURhdGEodm0sIDEpOwp9CgpmdW5jdGlvbiBvbkNvbnRhY3RTZWFyY2hSZXNldCh2bSkgewogIHZhciBncm91cFNlbGVjdEl0ZW0gPSBnZXRJdGVtQnlLZXkodm0uZGF0YSwgImNvbnRhY3RzTGlzdCIsICJjb250YWN0TGlzdFNlbGVjdCIpOwogIGdyb3VwU2VsZWN0SXRlbS5zZWxlY3RJdGVtcyA9IFt7CiAgICBrZXk6ICJBbGxDb250YWN0cyIsCiAgICBsYWJlbDogdm0uJHQoIkFsbENvbnRhY3RzIikKICB9LCB7CiAgICBrZXk6ICJCbGFja0xpc3QiLAogICAgbGFiZWw6IHZtLiR0KCJCbGFja0xpc3QiKQogIH1dOwogIGdyb3VwU2VsZWN0SXRlbS52YWx1ZSA9ICJBbGxDb250YWN0cyI7CiAgdm0uc2VhcmNoVmFsdWUgPSAiIjsKICBnZXRJdGVtQnlLZXkodm0uZGF0YSwgImNvbnRhY3RzTGlzdCIsICJzZWFyY2giKS52YWx1ZSA9ICIiOwogIGdldENvbnRhY3RzVGFibGVEYXRhKHZtLCAxKTsKfQ=="},null]}