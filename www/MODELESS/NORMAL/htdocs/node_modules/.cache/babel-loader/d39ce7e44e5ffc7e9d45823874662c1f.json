{"remainingRequest":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/thread-loader/dist/cjs.js!/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/babel-loader/lib/index.js!/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/src/js/common.js","dependencies":[{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/src/js/common.js","mtime":1600155105018},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/cache-loader/dist/cjs.js","mtime":1600155105894},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/thread-loader/dist/cjs.js","mtime":1600155105122},{"path":"/workspace3/minjie.chen/gitlab-work/advance-indoor/resources/www/MODELESS/NORMAL/htdocs/node_modules/babel-loader/lib/index.js","mtime":1600155105338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIjsKCmZ1bmN0aW9uIGFwcGVuZEhUTUwoZG9tLCBodG1sKSB7CiAgdmFyIGRpdlRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwKICAgICAgbm9kZXMgPSBudWxsLAogICAgICBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICBkaXZUZW1wLmlubmVySFRNTCA9IGh0bWw7CiAgbm9kZXMgPSBkaXZUZW1wLmNoaWxkTm9kZXM7CgogIGZvciAodmFyIGogPSAwLCBsZW5ndGggPSBub2Rlcy5sZW5ndGg7IGogPCBsZW5ndGg7IGogKz0gMSkgewogICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQobm9kZXNbal0uY2xvbmVOb2RlKHRydWUpKTsKICB9CgogIGRvbS5hcHBlbmRDaGlsZChmcmFnbWVudCk7CiAgbm9kZXMgPSBudWxsOwogIGZyYWdtZW50ID0gbnVsbDsKfQoKZnVuY3Rpb24gc2hvd1JlcXVlc3RTdWNjZXNzKHZtKSB7CiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oImRhdGFDaGFuZ2VkIiwgZmFsc2UpOwoKICBmb3IgKHZhciBzdWJtaXRLZXkgaW4gdm0uc3VibWl0Q2ZnRGF0YSkgewogICAgdm0uYXBpRGF0YS5jb25maWdEYXRhW3N1Ym1pdEtleV0gPSB2bS5zdWJtaXRDZmdEYXRhW3N1Ym1pdEtleV07CiAgfQoKICBpZiAobGVuID09IDEpIHsKICAgIHNob3dSZXF1ZXN0U3VjY2Vzc1dpdGhJbmZvKGFyZ3VtZW50c1swXSwgdm0uJHQoIlN1Ym1pdFN1Y2Nlc3MiKSk7CiAgfSBlbHNlIGlmIChsZW4gPT0gMikgewogICAgc2hvd1JlcXVlc3RTdWNjZXNzV2l0aEluZm8oYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pOwogIH0KfQoKZnVuY3Rpb24gc2hvd1JlcXVlc3RTdWNjZXNzV2l0aEluZm8odm0sIGluZm8pIHsKICBjb25zb2xlLmxvZyh2bS4kbm90aWZpY2F0aW9uKTsKICB2bS4kbm90aWZpY2F0aW9uWyJzdWNjZXNzIl0oewogICAgbWVzc2FnZTogaW5mbywKICAgIGR1cmF0aW9uOiAyCiAgfSk7Cn0KCmZ1bmN0aW9uIHNob3dFcnJvckluZm8odm0sIGluZm8pIHsKICB2bS4kbm90aWZpY2F0aW9uWyJlcnJvciJdKHsKICAgIG1lc3NhZ2U6IGluZm8sCiAgICBkdXJhdGlvbjogNQogIH0pOwogIHZtLmxvYWRpbmcgPSBmYWxzZTsKfQoKZnVuY3Rpb24gc2hvd1dhcm5pbmdJbmZvKHZtLCBpbmZvKSB7CiAgdm0uJG5vdGlmaWNhdGlvblsid2FybmluZyJdKHsKICAgIG1lc3NhZ2U6IGluZm8sCiAgICBkdXJhdGlvbjogNQogIH0pOwogIHZtLmxvYWRpbmcgPSBmYWxzZTsKfQoKZnVuY3Rpb24gaXNBbkludGVyZ2VyKHBvc3REYXRhLCBEZXN0RWxlSWQpIHsKICB2YXIgTGV0dGVycyA9ICIxMjM0NTY3ODkwIjsKICB2YXIgaTsKICB2YXIgYzsKCiAgZm9yIChpID0gMDsgaSA8IHBvc3REYXRhLmxlbmd0aDsgaSsrKSB7CiAgICBjID0gcG9zdERhdGEuY2hhckF0KGkpOwoKICAgIGlmICgtMSA9PSBMZXR0ZXJzLmluZGV4T2YoYykpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgaWYgKCFjaGVja0xlbmd0aE9mRGF0YShwb3N0RGF0YSwgMCwgNjMpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gY2hlY2tMZW5ndGhPZkRhdGEocG9zdERhdGEsIG1pbl9udW0sIG1heF9udW0pIHsKICB2YXIgbGVuID0gY2hlY2tMZW5ndGgocG9zdERhdGEpOwoKICBpZiAobGVuIDwgbWluX251bSB8fCBsZW4gPiBtYXhfbnVtKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gY2hlY2tMZW5ndGgoZGVzdFN0ciwgZGVzdExlbikgewogIHZhciBieXRlTGVuID0gMDsKICB2YXIgbGVuID0gZGVzdFN0ci5sZW5ndGg7CgogIGlmIChudWxsICE9IGRlc3RTdHIpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgaWYgKGRlc3RTdHIuY2hhckNvZGVBdChpKSA8IDB4MDgwKSB7CiAgICAgICAgYnl0ZUxlbiArPSAxOwogICAgICB9IGVsc2UgaWYgKGRlc3RTdHIuY2hhckNvZGVBdChpKSA8IDB4MDgwMCkgewogICAgICAgIGJ5dGVMZW4gKz0gMjsKICAgICAgfSBlbHNlIHsKICAgICAgICBieXRlTGVuICs9IDM7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gYnl0ZUxlbjsKICB9IGVsc2UgewogICAgcmV0dXJuIDA7CiAgfQp9CgpmdW5jdGlvbiBpc1BvcnQocG9zdERhdGEpIHsKICBpZiAoIWlzQW5JbnRlcmdlcihwb3N0RGF0YSkpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIGlmICgwID09IHBvc3REYXRhLmxlbmd0aCkgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICBpZiAoTnVtYmVyKHBvc3REYXRhKSA+IDY1NTM1IHx8IE51bWJlcihwb3N0RGF0YSkgPD0gMCB8fCBwb3N0RGF0YS5sZW5ndGggPCAwIHx8IHBvc3REYXRhLmxlbmd0aCA+IDUpIHsKICAgIC8vYWxlcnQoRGF0YVJhbmdlV2FybmluZyk7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gZ2V0VHJhbnNUaXRsZSh0aXRsZSwgdm0pIHsKICB2YXIgaW5kZXggPSB0aXRsZS5pbmRleE9mKCIkdCgnIik7CgogIGlmIChpbmRleCA9PSAtMSkgewogICAgcmV0dXJuIHRpdGxlOwogIH0gZWxzZSB7CiAgICB2YXIgbGFzdEluZGV4ID0gdGl0bGUuc3Vic3RyaW5nKGluZGV4LCB0aXRsZS5sZW5ndGgpLmluZGV4T2YoIicpIik7CiAgICB2YXIgaXRlbSA9IHRpdGxlLnN1YnN0cmluZyhpbmRleCArIDQsIGxhc3RJbmRleCArIGluZGV4KTsKICAgIHJldHVybiB0aXRsZS5yZXBsYWNlKCIkdCgnIiArIGl0ZW0gKyAiJykiLCB2bS4kdChpdGVtKSk7CiAgfQp9CgpmdW5jdGlvbiBnZXRUeXBlKG9iaikgewogIC8vdG9zdHJpbmfkvJrov5Tlm57lr7nlupTkuI3lkIznmoTmoIfnrb7nmoTmnoTpgKDlh73mlbAKICB2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOwogIHZhciBtYXAgPSB7CiAgICAnW29iamVjdCBCb29sZWFuXSc6ICdib29sZWFuJywKICAgICdbb2JqZWN0IE51bWJlcl0nOiAnbnVtYmVyJywKICAgICdbb2JqZWN0IFN0cmluZ10nOiAnc3RyaW5nJywKICAgICdbb2JqZWN0IEZ1bmN0aW9uXSc6ICdmdW5jdGlvbicsCiAgICAnW29iamVjdCBBcnJheV0nOiAnYXJyYXknLAogICAgJ1tvYmplY3QgRGF0ZV0nOiAnZGF0ZScsCiAgICAnW29iamVjdCBSZWdFeHBdJzogJ3JlZ0V4cCcsCiAgICAnW29iamVjdCBVbmRlZmluZWRdJzogJ3VuZGVmaW5lZCcsCiAgICAnW29iamVjdCBOdWxsXSc6ICdudWxsJywKICAgICdbb2JqZWN0IE9iamVjdF0nOiAnb2JqZWN0JwogIH07CgogIGlmIChvYmogaW5zdGFuY2VvZiBFbGVtZW50KSB7CiAgICByZXR1cm4gJ2VsZW1lbnQnOwogIH0KCiAgcmV0dXJuIG1hcFt0b1N0cmluZy5jYWxsKG9iaildOwp9CgpmdW5jdGlvbiBkZWVwQ2xvbmUoZGF0YSkgewogIHZhciB0eXBlID0gZ2V0VHlwZShkYXRhKTsKICB2YXIgb2JqOwoKICBpZiAodHlwZSA9PT0gJ2FycmF5JykgewogICAgb2JqID0gW107CiAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JykgewogICAgb2JqID0ge307CiAgfSBlbHNlIHsKICAgIC8v5LiN5YaN5YW35pyJ5LiL5LiA5bGC5qyhCiAgICByZXR1cm4gZGF0YTsKICB9CgogIGlmICh0eXBlID09PSAnYXJyYXknKSB7CiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICBvYmoucHVzaChkZWVwQ2xvbmUoZGF0YVtpXSkpOwogICAgfQogIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHsKICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7CiAgICAgIG9ialtrZXldID0gZGVlcENsb25lKGRhdGFba2V5XSk7CiAgICB9CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBnZXRJbmRleEJ5S2V5KGRhdGEsIGtleSkgewogIHJldHVybiBkYXRhLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgcmV0dXJuIGl0ZW0ua2V5OwogIH0pLmluZGV4T2Yoa2V5KTsKfQoKZnVuY3Rpb24gZ2V0SXRlbUJ5S2V5KGRhdGEsIGNvbnRlbnRLZXksIGl0ZW1LZXkpIHsKICB2YXIgY29udGVudEluZGV4ID0gZ2V0SW5kZXhCeUtleShkYXRhLmNvbnRlbnRzLCBjb250ZW50S2V5KTsKICB2YXIgaXRlbUluZGV4ID0gZ2V0SW5kZXhCeUtleShkYXRhLmNvbnRlbnRzW2NvbnRlbnRJbmRleF0uaXRlbXMsIGl0ZW1LZXkpOwogIHJldHVybiBkYXRhLmNvbnRlbnRzW2NvbnRlbnRJbmRleF0uaXRlbXNbaXRlbUluZGV4XTsKfQoKZnVuY3Rpb24gY2hlY2tGaWxlRm9ybWF0KHVwbG9hZEZpbGVOYW1lLCBmaWxlVHlwZSwgZXhwYW5kTGVudGgpIHsKICBpZiAodXBsb2FkRmlsZU5hbWUgPT0gIiIpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZhciBmaWxlRXhwYW5kID0gdXBsb2FkRmlsZU5hbWUuc3Vic3RyaW5nKHVwbG9hZEZpbGVOYW1lLmxlbmd0aCAtIGV4cGFuZExlbnRoLCB1cGxvYWRGaWxlTmFtZS5sZW5ndGgpOwoKICBpZiAoZmlsZUV4cGFuZC50b1VwcGVyQ2FzZSgpICE9IGZpbGVUeXBlLnRvVXBwZXJDYXNlKCkpIHsKICAgIC8vYWxlcnQoRmlsZUZvcm1hdFdhcm5pbmcpOwogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgcmV0dXJuIHRydWU7Cn0KCmZ1bmN0aW9uIG5vdENvbnRhaW5JbnZhbGlkX1N1Yihwb3N0RGF0YSkgewogIC8vIHZhciBMZXR0ZXJzID0gIiY9XCclKiNePD5877yH77yCIjsKICB2YXIgTGV0dGVycyA9ICImPVwnJSI7CiAgdmFyIGksIGMsIGo7CgogIGZvciAoaSA9IDA7IGkgPCBwb3N0RGF0YS5sZW5ndGg7IGkrKykgewogICAgYyA9IHBvc3REYXRhLmNoYXJDb2RlQXQoaSk7CgogICAgZm9yIChqID0gMDsgaiA8IExldHRlcnMubGVuZ3RoOyBqKyspIHsKICAgICAgaWYgKGMgPT0gTGV0dGVycy5jaGFyQ29kZUF0KGopKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gY2hlY2tSYW5nZU9mTnVtYmVyKHBvc3REYXRhLCBtaW5fbnVtLCBtYXhfbnVtKSB7CiAgaWYgKCFpc0FuSW50ZXJnZXIocG9zdERhdGEpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoTnVtYmVyKHBvc3REYXRhKSA+IG1heF9udW0gfHwgTnVtYmVyKHBvc3REYXRhKSA8IG1pbl9udW0pIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBub3RDb250YWluSW52YWxpZChwb3N0RGF0YSkgewogIGlmICghY2hlY2tMZW5ndGhPZkRhdGEocG9zdERhdGEsIDAsIDYzKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgcmV0dXJuIG5vdENvbnRhaW5JbnZhbGlkX1N1Yihwb3N0RGF0YSk7Cn0KCmZ1bmN0aW9uIGlzUG9ydFVzZWQobWluUG9ydCwgbWF4UG9ydCwgY29tcGFyZWRQb3J0KSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wYXJlZFBvcnQubGVuZ3RoOyBpKyspIHsKICAgIGlmIChjb21wYXJlZFBvcnRbaV0pIHsKICAgICAgaWYgKE51bWJlcihtaW5Qb3J0KSA+IE51bWJlcihjb21wYXJlZFBvcnRbaV0ubWluKSB8fCBOdW1iZXIobWF4UG9ydCkgPCBOdW1iZXIoY29tcGFyZWRQb3J0W2ldLm1heCkpIGNvbnRpbnVlOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CgogIHJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gZ2V0RW5hYmxlU2VsZWN0SXRlbXModm0pIHsKICByZXR1cm4gW3sKICAgIGtleTogMCwKICAgIGxhYmVsOiB2bS4kdCgiRGlzYWJsZWQiKQogIH0sIHsKICAgIGtleTogMSwKICAgIGxhYmVsOiB2bS4kdCgiRW5hYmxlZCIpCiAgfV07Cn0KCmZ1bmN0aW9uIGNoZWNrSXBBZGRyKGlwU3RyKSB7CiAgaWYgKCFjaGVja0lwQWRkcl9TaW1wKGlwU3RyKSkgcmV0dXJuIGZhbHNlOwogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBjaGVja0lwQWRkcl9TaW1wKGlwU3RyKSB7CiAgdmFyIHN0cmxlbmd0aCA9IGlwU3RyLmxlbmd0aDsKCiAgaWYgKGlwU3RyID09ICIiKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoc3RybGVuZ3RoID4gMTUgfHwgc3RybGVuZ3RoIDwgNyAmJiBzdHJsZW5ndGggPiAwKSAvL0lQ55qE5a2X5q616ZW/5bqm55qE6ZmQ5Yi2IAogICAgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogIHZhciBwYXRybiA9IC9eXGR7MSwzfVwuXGR7MSwzfVwuXGR7MSwzfVwuXGR7MSwzfSQvOyAvL+ato+WImeihqOi+vuW8j++8jFxk5Li65pWw5a2XLHsxLDN95LiA5L2N5oiW5Li65LiJ5L2NLiAKCiAgaWYgKCFwYXRybi5leGVjKGlwU3RyKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgdmFyIGxhc3RzdHI7CiAgbGFzdHN0ciA9IGlwU3RyLnNwbGl0KCIuIik7IC8v55SoLuaKiuWtl+espuS4snN0cuWIhuW8gCAKCiAgdmFyIGxhc3RfcGF0cm4gPSAvXlxkezEsM30kLzsKCiAgaWYgKHBhcnNlSW50KGxhc3RzdHJbMF0pID4gMjU1IHx8IHBhcnNlSW50KGxhc3RzdHJbMV0pID4gMjU1IHx8IHBhcnNlSW50KGxhc3RzdHJbMl0pID4gMjU1IHx8IHBhcnNlSW50KGxhc3RzdHJbM10pID4gMjU1KSAvL+WIpOaWrUlQ5q+P5L2N55qE5aSn5bCPIAogICAgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogIGlmICghbGFzdF9wYXRybi5leGVjKGxhc3RzdHJbM10pKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gYmluVmFsT2ZOdW0oVmFsKSB7CiAgdmFyIHRtcCA9IHBhcnNlRmxvYXQoVmFsKS50b1N0cmluZygyKTsKICB2YXIgdG1wWjsKCiAgaWYgKDAgPT0gdG1wKSB7CiAgICByZXR1cm4gIjAwMDAwMDAwIjsKICB9CgogIGlmICh0bXAubGVuZ3RoIDwgOCkgewogICAgdG1wWiA9ICIiOwogICAgdmFyIGkgPSAwOwoKICAgIHdoaWxlIChpIDwgOCAtIHRtcC5sZW5ndGgpIHsKICAgICAgdG1wWiA9ICIwIiArIHRtcFo7CiAgICAgIGkrKzsKICAgIH0KCiAgICB0bXAgPSB0bXBaICsgdG1wOwogIH0KCiAgcmV0dXJuIHRtcDsgLy/moLzlvI/ljJbovpPlh7oo6KGl6Zu2KSAKfQoKZnVuY3Rpb24gY2hlY2tTdWJNYXNrVjQoaXBTdHIsIHN1Ym5ldE1hc2spIHsKICBpZiAoIWNoZWNrSXBBZGRyX1NpbXAoaXBTdHIpIHx8ICFjaGVja0lwQWRkcl9TaW1wKHN1Ym5ldE1hc2spKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoIjI1NS4yNTUuMjU1LjI1NSIgPT0gc3VibmV0TWFzayB8fCAiMjU1LjI1NS4yNTUuMjU0IiA9PSBzdWJuZXRNYXNrIHx8ICIwLjAuMC4wIiA9PSBzdWJuZXRNYXNrKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgc3ViTUFyciA9IHN1Ym5ldE1hc2suc3BsaXQoIi4iKTsKICB2YXIgc3ViTUJpblN0ciA9IGJpblZhbE9mTnVtKHN1Yk1BcnJbMF0pICsgYmluVmFsT2ZOdW0oc3ViTUFyclsxXSkgKyBiaW5WYWxPZk51bShzdWJNQXJyWzJdKSArIGJpblZhbE9mTnVtKHN1Yk1BcnJbM10pOwoKICBpZiAoLTEgIT0gc3ViTUJpblN0ci5pbmRleE9mKCIwMSIpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgaXBBcnIgPSBpcFN0ci5zcGxpdCgiLiIpOwogIHZhciBpcEJpblN0ciA9IGJpblZhbE9mTnVtKGlwQXJyWzBdKSArIGJpblZhbE9mTnVtKGlwQXJyWzFdKSArIGJpblZhbE9mTnVtKGlwQXJyWzJdKSArIGJpblZhbE9mTnVtKGlwQXJyWzNdKTsKCiAgaWYgKGlwQmluU3RyID09IGlwQmluU3RyICYgc3ViTUJpblN0cikgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgcmV0dXJuIHRydWU7Cn0KCmZ1bmN0aW9uIG5vdENvbnRhaW5JbnZhbGlkX05vdEVtcHR5KHBvc3REYXRhKSB7CiAgaWYgKCFjaGVja0xlbmd0aE9mRGF0YShwb3N0RGF0YSwgMSwgNjMpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICByZXR1cm4gbm90Q29udGFpbkludmFsaWRfU3ViKHBvc3REYXRhKTsKfQoKZnVuY3Rpb24gaXNIb3VyKHBvc3REYXRhKSB7CiAgdmFyIExldHRlcnMgPSAiMTIzNDU2Nzg5MCI7CiAgdmFyIGk7CiAgdmFyIGM7IC8vdmFyIGhhc0RpZ2l0OyAKCiAgZm9yIChpID0gMDsgaSA8IHBvc3REYXRhLmxlbmd0aDsgaSsrKSB7CiAgICBjID0gcG9zdERhdGEuY2hhckF0KGkpOwoKICAgIGlmICgtMSA9PSBMZXR0ZXJzLmluZGV4T2YoYykpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgaWYgKDApIHsKICAgIGlmIChOdW1iZXIocG9zdERhdGEpID4gMTIgfHwgTnVtYmVyKHBvc3REYXRhKSA8IDApIHJldHVybiBmYWxzZTsKICB9IGVsc2UgewogICAgaWYgKE51bWJlcihwb3N0RGF0YSkgPiAyMyB8fCBOdW1iZXIocG9zdERhdGEpIDwgMCkgewogICAgICAvL2FsZXJ0KEludmFsaWRUaW1lV2FybmluZyk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIGlmIChwb3N0RGF0YS5sZW5ndGggPiAyIHx8IHBvc3REYXRhLmxlbmd0aCA8IDEpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBpc01pbnV0ZU9yU2VjKHBvc3REYXRhKSB7CiAgaWYgKCFpc0FuSW50ZXJnZXIocG9zdERhdGEpKSB7CiAgICAvL2FsZXJ0KEludmFsaWRUaW1lV2FybmluZyk7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoTnVtYmVyKHBvc3REYXRhKSA+IDU5IHx8IE51bWJlcihwb3N0RGF0YSkgPCAwKSB7CiAgICAvL2FsZXJ0KEludmFsaWRUaW1lV2FybmluZyk7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAocG9zdERhdGEubGVuZ3RoID4gMiB8fCBwb3N0RGF0YS5sZW5ndGggPCAxKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gY2hlY2tGaWxlU2l6ZShpbnB1dEZpbGUsIFVwTGltaXQsIExvd2VyTGltaXQpIHsKICB0cnkgewogICAgdmFyIGJ5dGVTaXplID0gaW5wdXRGaWxlLnNpemU7CiAgICB2YXIgTWJ5dGVTaXplID0gTWF0aC5jZWlsKGJ5dGVTaXplIC8gMTAyNCk7IC8vIFNpemUgcmV0dXJuZWQgaW4gS0IuCgogICAgaWYgKE1ieXRlU2l6ZSA+PSBVcExpbWl0KSB7CiAgICAgIC8vZmlsZSB0b28gbGFyZ2UKICAgICAgcmV0dXJuIC0yOwogICAgfSBlbHNlIGlmIChNYnl0ZVNpemUgPCBMb3dlckxpbWl0KSB7CiAgICAgIC8vZmlsZSB0b28gc21hbGwKICAgICAgcmV0dXJuIC0zOwogICAgfSBlbHNlIGlmICgwID09IE1ieXRlU2l6ZSkgewogICAgICByZXR1cm4gLTE7CiAgICB9CgogICAgcmV0dXJuIDA7CiAgfSBjYXRjaCAoZSkgewogICAgcmV0dXJuIDA7CiAgfQp9CgpmdW5jdGlvbiBpc0FWYWxpZERpYWxlZE51bWJlcihwb3N0RGF0YSkgewogIGlmICghY2hlY2tMZW5ndGhPZkRhdGEocG9zdERhdGEsIDAsIDYzKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgaWYgKCFpc0RpZ2l0T3JBbHBoYWJldE1vdXNlU2lnbihwb3N0RGF0YSkpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBpc0RpZ2l0T3JBbHBoYWJldE1vdXNlU2lnbihwb3N0RGF0YSkgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zdERhdGEubGVuZ3RoOyBpKyspIHsKICAgIHZhciBuID0gcG9zdERhdGEuY2hhckNvZGVBdChpKTsKCiAgICBpZiAoIShuID49IDQ4ICYmIG4gPD0gNTcgfHwgbiA+PSA2NSAmJiBuIDw9IDkwIHx8IG4gPj0gOTcgJiYgbiA8PSAxMjIgfHwgNjQgPT0gbiB8fCA0NiA9PSBuIHx8IDQzID09IG4gfHwgNDUgPT0gbiB8fCA0MiA9PSBuKSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQoKICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gZGF0ZUZ0dChmbXQsIGRhdGUpIHsKICB2YXIgbyA9IHsKICAgICJNKyI6IGRhdGUuZ2V0TW9udGgoKSArIDEsCiAgICAvL+aciOS7vSAKICAgICJkKyI6IGRhdGUuZ2V0RGF0ZSgpLAogICAgLy/ml6UgCiAgICAiaCsiOiBkYXRlLmdldEhvdXJzKCksCiAgICAvL+Wwj+aXtiAKICAgICJtKyI6IGRhdGUuZ2V0TWludXRlcygpLAogICAgLy/liIYgCiAgICAicysiOiBkYXRlLmdldFNlY29uZHMoKSwKICAgIC8v56eSIAogICAgInErIjogTWF0aC5mbG9vcigoZGF0ZS5nZXRNb250aCgpICsgMykgLyAzKSwKICAgIC8v5a2j5bqmIAogICAgIlMiOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC8v5q+r56eSIAoKICB9OwogIGlmICgvKHkrKS8udGVzdChmbXQpKSBmbXQgPSBmbXQucmVwbGFjZShSZWdFeHAuJDEsIChkYXRlLmdldEZ1bGxZZWFyKCkgKyAiIikuc3Vic3RyKDQgLSBSZWdFeHAuJDEubGVuZ3RoKSk7CgogIGZvciAodmFyIGsgaW4gbykgewogICAgaWYgKG5ldyBSZWdFeHAoIigiICsgayArICIpIikudGVzdChmbXQpKSBmbXQgPSBmbXQucmVwbGFjZShSZWdFeHAuJDEsIFJlZ0V4cC4kMS5sZW5ndGggPT0gMSA/IG9ba10gOiAoIjAwIiArIG9ba10pLnN1YnN0cigoIiIgKyBvW2tdKS5sZW5ndGgpKTsKICB9CgogIHJldHVybiBmbXQ7Cn0KCmZ1bmN0aW9uIGZvcm1hdEFNUE0oZGF0ZSkgewogIHZhciBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTsKICB2YXIgbWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpOwogIHZhciBzZWNvbmRzID0gZGF0ZS5nZXRTZWNvbmRzKCk7CiAgdmFyIGFtcG0gPSBob3VycyA+PSAxMiA/ICdQTScgOiAnQU0nOwogIGhvdXJzID0gaG91cnMgJSAxMjsKICBob3VycyA9IGhvdXJzID8gaG91cnMgOiAxMjsgLy8gdGhlIGhvdXIgJzAnIHNob3VsZCBiZSAnMTInCgogIG1pbnV0ZXMgPSBtaW51dGVzIDwgMTAgPyAnMCcgKyBtaW51dGVzIDogbWludXRlczsKICBzZWNvbmRzID0gc2Vjb25kcyA8IDEwID8gJzAnICsgc2Vjb25kcyA6IHNlY29uZHM7CiAgdmFyIHN0clRpbWUgPSBob3VycyArICc6JyArIG1pbnV0ZXMgKyAnOicgKyBzZWNvbmRzICsgJyAnICsgYW1wbTsKICByZXR1cm4gc3RyVGltZTsKfQoKZnVuY3Rpb24gb25XZWJIYW5ndXAodm0pIHsKICB2YXIgcmVxdWVzdERhdGEgPSB7CiAgICB0YXJnZXQ6ICJwaG9uZUNhbGwiLAogICAgYWN0aW9uOiAiaGFuZ3VwIgogIH07CiAgdm0uJGF4aW9zLnBvc3QoImFwaSIsIHJlcXVlc3REYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgdmFyIHJldGNvZGUgPSByZXNwb25zZS5kYXRhLnJldGNvZGU7CgogICAgaWYgKHJldGNvZGUgPT0gMCkgewogICAgICBzaG93UmVxdWVzdFN1Y2Nlc3NXaXRoSW5mbyh2bSwgdm0uJHQoIlNlbmRTdWNjZXNzIikpOwogICAgfSBlbHNlIGlmIChyZXRjb2RlID09IC0yKSB7CiAgICAgIHNob3dFcnJvckluZm8odm0sIHZtLiR0KCJDYWxsRmFpbGVkV2FybiIpKTsKICAgIH0KICB9KTsKfQoKdmFyIGxhbmdNYXAgPSBuZXcgTWFwKFtbMCwgIkVOR0xJU0giXSwgWzEsICJDSElORVNFX1MiXSwgWzIsICJDSElORVNFX1QiXSwgWzMsICJSVVNTSUFOIl0sIFs0LCAiQ1pFQ0giXSwgWzUsICJQT1JUVUdVRVNFIl0sIFs2LCAiU1BBTklTSCJdLCBbOCwgIkRVVENIIl0sIFs5LCAiRlJFTkNIIl0sIFsxMCwgIkdFUk1BTiJdLCBbMTMsICJQT0xJU0giXSwgWzE0LCAiVFVSS0lTSCJdLCBbMTUsICJKQVBBTkVTRSJdLCBbMTYsICJNT05HT0xJQSJdLCBbMTcsICJWSUVUTkFNRVNFIl1dKTsKCmZ1bmN0aW9uIGdldExhbmdBcnJheSh2bSkgewogIHJldHVybiBbewogICAga2V5OiAwLAogICAgbGFiZWw6IHZtLiR0KCJFbmdsaXNoIikKICB9LCB7CiAgICBrZXk6IDEsCiAgICBsYWJlbDogdm0uJHQoIkNoaW5lc2UiKQogIH0sIHsKICAgIGtleTogMiwKICAgIGxhYmVsOiB2bS4kdCgiQ2hpbmVzZVRyIikKICB9LCB7CiAgICBrZXk6IDMsCiAgICBsYWJlbDogdm0uJHQoIlJ1c3NpYW4iKQogIH0sIHsKICAgIGtleTogNCwKICAgIGxhYmVsOiB2bS4kdCgiQ3plY2giKQogIH0sIHsKICAgIGtleTogNSwKICAgIGxhYmVsOiB2bS4kdCgiUG9ydHVndWVzZSIpCiAgfSwgewogICAga2V5OiA2LAogICAgbGFiZWw6IHZtLiR0KCJTcGFuaXNoIikKICB9LCB7CiAgICBrZXk6IDgsCiAgICBsYWJlbDogdm0uJHQoIkR1dGNoIikKICB9LCB7CiAgICBrZXk6IDksCiAgICBsYWJlbDogdm0uJHQoIkZyZW5jaCIpCiAgfSwgewogICAga2V5OiAxMCwKICAgIGxhYmVsOiB2bS4kdCgiR2VybWFueSIpCiAgfSwgewogICAga2V5OiAxMywKICAgIGxhYmVsOiB2bS4kdCgiUG9saXNoIikKICB9LCB7CiAgICBrZXk6IDE0LAogICAgbGFiZWw6IHZtLiR0KCJUdXJraXNoIikKICB9LCB7CiAgICBrZXk6IDE1LAogICAgbGFiZWw6IHZtLiR0KCJKYXBhbmVzZSIpCiAgfSwgewogICAga2V5OiAxNiwKICAgIGxhYmVsOiB2bS4kdCgiTW9uZ29saWEiKQogIH0sIHsKICAgIGtleTogMTcsCiAgICBsYWJlbDogdm0uJHQoIlZpZXRuYW1lc2UiKQogIH1dOwp9CgpmdW5jdGlvbiBnZXRBY2NvdW50U3RhdHVzU3RyKHZtLCBzdHIpIHsKICBpZiAoc3RyID09ICIyIikgewogICAgcmV0dXJuIHZtLiR0KCdSZWdpc3RlcmVkJyk7CiAgfSBlbHNlIGlmIChzdHIgPT0gIjEiKSB7CiAgICByZXR1cm4gdm0uJHQoJ1JlZ2lzdGVyaW5nJyk7CiAgfSBlbHNlIGlmIChzdHIgPT0gIjMiKSB7CiAgICByZXR1cm4gdm0uJHQoJ1JlZ2lzdHJhdGlvbkZhaWxlZCcpOwogIH0gZWxzZSBpZiAoc3RyID09ICIwIikgewogICAgcmV0dXJuIHZtLiR0KCdEaXNhYmxlZCcpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gdm0uJHQoJ1VuUmVnaXN0ZXJlZCcpOwogIH0KfQoKZnVuY3Rpb24gaXNWYWxpZExvZ2luUHN3KHN0cikgewogIHZhciBiVXBwZXIgPSBmYWxzZTsKICB2YXIgYkxvd2VyID0gZmFsc2U7CiAgdmFyIGJEaWdpdHMgPSBmYWxzZTsKICB2YXIgbkZsYWcgPSAwOwogIHZhciBjLCBjaGFyQ29kZTsKICBpZiAoOCA8PSBzdHIubGVuZ3RoKSBuRmxhZyArPSAxOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykgewogICAgYyA9IHN0ci5jaGFyQXQoaSk7CiAgICBjaGFyQ29kZSA9IGMuY2hhckNvZGVBdCgpOwoKICAgIGlmICg2NSA8PSBjaGFyQ29kZSAmJiA5MCA+PSBjaGFyQ29kZSAmJiBmYWxzZSA9PSBiVXBwZXIpIHsKICAgICAgYlVwcGVyID0gdHJ1ZTsKICAgICAgbkZsYWcgKz0gODsKICAgIH0gZWxzZSBpZiAoOTcgPD0gY2hhckNvZGUgJiYgMTIyID49IGNoYXJDb2RlICYmIGZhbHNlID09IGJMb3dlcikgewogICAgICBiTG93ZXIgPSB0cnVlOwogICAgICBuRmxhZyArPSA0OwogICAgfSBlbHNlIGlmICg0OCA8PSBjaGFyQ29kZSAmJiA1NyA+PSBjaGFyQ29kZSAmJiBmYWxzZSA9PSBiRGlnaXRzKSB7CiAgICAgIGJEaWdpdHMgPSB0cnVlOwogICAgICBuRmxhZyArPSAyOwogICAgfQogIH0KCiAgcmV0dXJuIG5GbGFnOwp9CgpleHBvcnQgeyBhcHBlbmRIVE1MLCBzaG93UmVxdWVzdFN1Y2Nlc3MsIHNob3dFcnJvckluZm8sIGlzUG9ydCwgZ2V0VHJhbnNUaXRsZSwgZGVlcENsb25lLCBnZXRJbmRleEJ5S2V5LCBnZXRJdGVtQnlLZXksIGNoZWNrRmlsZUZvcm1hdCwgbm90Q29udGFpbkludmFsaWQsIGNoZWNrUmFuZ2VPZk51bWJlciwgaXNQb3J0VXNlZCwgaXNBbkludGVyZ2VyLCBnZXRFbmFibGVTZWxlY3RJdGVtcywgY2hlY2tJcEFkZHIsIGNoZWNrU3ViTWFza1Y0LCBub3RDb250YWluSW52YWxpZF9Ob3RFbXB0eSwgaXNIb3VyLCBpc01pbnV0ZU9yU2VjLCBjaGVja0ZpbGVTaXplLCBzaG93V2FybmluZ0luZm8sIGlzQVZhbGlkRGlhbGVkTnVtYmVyLCBzaG93UmVxdWVzdFN1Y2Nlc3NXaXRoSW5mbywgZGF0ZUZ0dCwgZm9ybWF0QU1QTSwgb25XZWJIYW5ndXAsIGdldEFjY291bnRTdGF0dXNTdHIsIGxhbmdNYXAsIGdldExhbmdBcnJheSwgaXNWYWxpZExvZ2luUHN3LCBub3RDb250YWluSW52YWxpZF9TdWIgfTs="},null]}